
kNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003784  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002c3ec  08003960  08003960  00013960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802fd4c  0802fd4c  000401e0  2**0
                  CONTENTS
  4 .ARM          00000000  0802fd4c  0802fd4c  000401e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802fd4c  0802fd4c  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802fd4c  0802fd4c  0003fd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802fd50  0802fd50  0003fd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802fd54  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  200001e0  0802ff34  000401e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  0802ff34  00040210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000745a  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e5  00000000  00000000  0004766a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002710  00000000  00000000  00048e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000520  00000000  00000000  0004b560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000778  00000000  00000000  0004ba80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00023d39  00000000  00000000  0004c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000562e  00000000  00000000  0006ff31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e0a55  00000000  00000000  0007555f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00155fb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000151c  00000000  00000000  00156030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e0 	.word	0x200001e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003944 	.word	0x08003944

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001e4 	.word	0x200001e4
 8000214:	08003944 	.word	0x08003944

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <partition.part.0>:
	partition(0,7524,distance, k);
	int ans = kvote(distance,k);
	behavior_type(ans)
	return drive_type;
}
int partition(int start,int end, float distance[][2], int k){
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	460e      	mov	r6, r1
 8000bf4:	4615      	mov	r5, r2
 8000bf6:	461f      	mov	r7, r3
	if (start == end){
		return 0;
	}
	int left = start;
	int right = end;
	float pvoid = distance[(start+end)/2][0];
 8000bf8:	1983      	adds	r3, r0, r6
 8000bfa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000bfe:	105b      	asrs	r3, r3, #1
 8000c00:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
	while(left <= right){
 8000c04:	42b0      	cmp	r0, r6
	float pvoid = distance[(start+end)/2][0];
 8000c06:	ed93 7a00 	vldr	s14, [r3]
	while(left <= right){
 8000c0a:	dc31      	bgt.n	8000c70 <partition.part.0+0x80>
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	4604      	mov	r4, r0
 8000c10:	e017      	b.n	8000c42 <partition.part.0+0x52>
		if(distance[left][0] < pvoid){
			left += 1;
			continue;
		}
		if(distance[right][0] > pvoid){
 8000c12:	edd2 6a00 	vldr	s13, [r2]
 8000c16:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1e:	f101 31ff 	add.w	r1, r1, #4294967295
 8000c22:	d40c      	bmi.n	8000c3e <partition.part.0+0x4e>
			right -= 1;
			continue;
		}
		float temp = distance[left][0];
		distance[left][0] = distance[right][0];
 8000c24:	edc3 6a00 	vstr	s13, [r3]
		distance[right][0] = temp;
 8000c28:	edc2 7a00 	vstr	s15, [r2]
		temp = distance[left][1];
 8000c2c:	f8d3 c004 	ldr.w	ip, [r3, #4]
		distance[left][1] = distance[right][1];
 8000c30:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8000c34:	f8c3 e004 	str.w	lr, [r3, #4]
		distance[right][1] = temp;
		left += 1;
 8000c38:	3401      	adds	r4, #1
		distance[right][1] = temp;
 8000c3a:	f8c2 c004 	str.w	ip, [r2, #4]
	while(left <= right){
 8000c3e:	428c      	cmp	r4, r1
 8000c40:	dc0d      	bgt.n	8000c5e <partition.part.0+0x6e>
		if(distance[left][0] < pvoid){
 8000c42:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8000c46:	edd3 7a00 	vldr	s15, [r3]
 8000c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(distance[right][0] > pvoid){
 8000c52:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
		if(distance[left][0] < pvoid){
 8000c56:	dddc      	ble.n	8000c12 <partition.part.0+0x22>
			left += 1;
 8000c58:	3401      	adds	r4, #1
	while(left <= right){
 8000c5a:	428c      	cmp	r4, r1
 8000c5c:	ddf1      	ble.n	8000c42 <partition.part.0+0x52>
		right -= 1;
	}
	if (k <= right){
 8000c5e:	428f      	cmp	r7, r1
 8000c60:	dd0d      	ble.n	8000c7e <partition.part.0+0x8e>
		partition(start,right,distance,k);
	}
	if (k >= left){
 8000c62:	42bc      	cmp	r4, r7
 8000c64:	dd00      	ble.n	8000c68 <partition.part.0+0x78>
		partition(left,end,distance,k);
	}
	return 0;
}
 8000c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (start == end){
 8000c68:	42a6      	cmp	r6, r4
 8000c6a:	d0fc      	beq.n	8000c66 <partition.part.0+0x76>
	if (k >= left){
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	e7c3      	b.n	8000bf8 <partition.part.0+0x8>
	if (k <= right){
 8000c70:	42be      	cmp	r6, r7
 8000c72:	da0b      	bge.n	8000c8c <partition.part.0+0x9c>
	if (k >= left){
 8000c74:	42b8      	cmp	r0, r7
 8000c76:	dcf6      	bgt.n	8000c66 <partition.part.0+0x76>
 8000c78:	4604      	mov	r4, r0
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	e7bc      	b.n	8000bf8 <partition.part.0+0x8>
	if (start == end){
 8000c7e:	4288      	cmp	r0, r1
 8000c80:	d0ef      	beq.n	8000c62 <partition.part.0+0x72>
 8000c82:	463b      	mov	r3, r7
 8000c84:	462a      	mov	r2, r5
 8000c86:	f7ff ffb3 	bl	8000bf0 <partition.part.0>
 8000c8a:	e7ea      	b.n	8000c62 <partition.part.0+0x72>
	if (k <= right){
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	4631      	mov	r1, r6
 8000c90:	e7f7      	b.n	8000c82 <partition.part.0+0x92>
 8000c92:	bf00      	nop

08000c94 <kNN>:
char* kNN(float test_data[], int k){
 8000c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c98:	ed2d 8b06 	vpush	{d8-d10}
 8000c9c:	f5ad 4d6b 	sub.w	sp, sp, #60160	; 0xeb00
 8000ca0:	b091      	sub	sp, #68	; 0x44
 8000ca2:	f10d 0b18 	add.w	fp, sp, #24
			temp += pow(model_lan_break[i][j] - test_data[j], 2);
 8000ca6:	ed90 aa00 	vldr	s20, [r0]
 8000caa:	edd0 9a01 	vldr	s19, [r0, #4]
 8000cae:	ed90 9a02 	vldr	s18, [r0, #8]
 8000cb2:	edd0 8a03 	vldr	s17, [r0, #12]
 8000cb6:	ed90 8a04 	vldr	s16, [r0, #16]
 8000cba:	4c8c      	ldr	r4, [pc, #560]	; (8000eec <kNN+0x258>)
 8000cbc:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8000efc <kNN+0x268>
char* kNN(float test_data[], int k){
 8000cc0:	9101      	str	r1, [sp, #4]
			temp += pow(model_lan_break[i][j] - test_data[j], 2);
 8000cc2:	465d      	mov	r5, fp
 8000cc4:	edd4 7a00 	vldr	s15, [r4]
 8000cc8:	ee77 7aca 	vsub.f32	s15, s15, s20
 8000ccc:	3418      	adds	r4, #24
 8000cce:	ee17 0a90 	vmov	r0, s15
 8000cd2:	f7ff fc0d 	bl	80004f0 <__aeabi_f2d>
 8000cd6:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8000cda:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8000cde:	4680      	mov	r8, r0
 8000ce0:	ee17 0a90 	vmov	r0, s15
 8000ce4:	4689      	mov	r9, r1
 8000ce6:	f7ff fc03 	bl	80004f0 <__aeabi_f2d>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	f7ff fc57 	bl	80005a0 <__aeabi_dmul>
 8000cf2:	4642      	mov	r2, r8
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	4640      	mov	r0, r8
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	f7ff fc4f 	bl	80005a0 <__aeabi_dmul>
 8000d02:	f7ff ff25 	bl	8000b50 <__aeabi_d2f>
 8000d06:	f7ff fbf3 	bl	80004f0 <__aeabi_f2d>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4639      	mov	r1, r7
 8000d12:	f7ff fa8f 	bl	8000234 <__adddf3>
 8000d16:	ed54 7a04 	vldr	s15, [r4, #-16]
 8000d1a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8000d1e:	4680      	mov	r8, r0
 8000d20:	ee17 0a90 	vmov	r0, s15
 8000d24:	4689      	mov	r9, r1
 8000d26:	f7ff fbe3 	bl	80004f0 <__aeabi_f2d>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	f7ff fc37 	bl	80005a0 <__aeabi_dmul>
 8000d32:	4606      	mov	r6, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	4640      	mov	r0, r8
 8000d38:	4649      	mov	r1, r9
 8000d3a:	f7ff ff09 	bl	8000b50 <__aeabi_d2f>
 8000d3e:	f7ff fbd7 	bl	80004f0 <__aeabi_f2d>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	4630      	mov	r0, r6
 8000d48:	4639      	mov	r1, r7
 8000d4a:	f7ff fa73 	bl	8000234 <__adddf3>
 8000d4e:	ed54 7a03 	vldr	s15, [r4, #-12]
 8000d52:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8000d56:	4606      	mov	r6, r0
 8000d58:	ee17 0a90 	vmov	r0, s15
 8000d5c:	460f      	mov	r7, r1
 8000d5e:	f7ff fbc7 	bl	80004f0 <__aeabi_f2d>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	f7ff fc1b 	bl	80005a0 <__aeabi_dmul>
 8000d6a:	4680      	mov	r8, r0
 8000d6c:	4689      	mov	r9, r1
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4639      	mov	r1, r7
 8000d72:	f7ff feed 	bl	8000b50 <__aeabi_d2f>
 8000d76:	f7ff fbbb 	bl	80004f0 <__aeabi_f2d>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4640      	mov	r0, r8
 8000d80:	4649      	mov	r1, r9
 8000d82:	f7ff fa57 	bl	8000234 <__adddf3>
 8000d86:	ed54 7a02 	vldr	s15, [r4, #-8]
 8000d8a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8000d8e:	4606      	mov	r6, r0
 8000d90:	ee17 0a90 	vmov	r0, s15
 8000d94:	460f      	mov	r7, r1
 8000d96:	f7ff fbab 	bl	80004f0 <__aeabi_f2d>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	f7ff fbff 	bl	80005a0 <__aeabi_dmul>
 8000da2:	4680      	mov	r8, r0
 8000da4:	4689      	mov	r9, r1
 8000da6:	4630      	mov	r0, r6
 8000da8:	4639      	mov	r1, r7
 8000daa:	f7ff fed1 	bl	8000b50 <__aeabi_d2f>
 8000dae:	f7ff fb9f 	bl	80004f0 <__aeabi_f2d>
 8000db2:	460b      	mov	r3, r1
 8000db4:	4602      	mov	r2, r0
 8000db6:	4649      	mov	r1, r9
 8000db8:	4640      	mov	r0, r8
 8000dba:	f7ff fa3b 	bl	8000234 <__adddf3>
 8000dbe:	f7ff fec7 	bl	8000b50 <__aeabi_d2f>
		temp = sqrt(temp);
 8000dc2:	f7ff fb95 	bl	80004f0 <__aeabi_f2d>
 8000dc6:	ec41 0b10 	vmov	d0, r0, r1
 8000dca:	f002 fcaf 	bl	800372c <sqrt>
 8000dce:	ec51 0b10 	vmov	r0, r1, d0
 8000dd2:	f7ff febd 	bl	8000b50 <__aeabi_d2f>
 8000dd6:	6028      	str	r0, [r5, #0]
		distance[i][1] = model_lan_break[i][5];
 8000dd8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8000ddc:	606b      	str	r3, [r5, #4]
	for (int i = 0; i < 7525; i++) {
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	f105 0508 	add.w	r5, r5, #8
 8000de4:	f47f af6e 	bne.w	8000cc4 <kNN+0x30>
	float pvoid = distance[(start+end)/2][0];
 8000de8:	ab06      	add	r3, sp, #24
 8000dea:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8000dee:	ed93 7a04 	vldr	s14, [r3, #16]
	int right = end;
 8000df2:	f641 5164 	movw	r1, #7524	; 0x1d64
	int left = start;
 8000df6:	2400      	movs	r4, #0
 8000df8:	e013      	b.n	8000e22 <kNN+0x18e>
		if(distance[right][0] > pvoid){
 8000dfa:	edd2 6a00 	vldr	s13, [r2]
 8000dfe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e06:	f101 31ff 	add.w	r1, r1, #4294967295
 8000e0a:	d408      	bmi.n	8000e1e <kNN+0x18a>
		distance[left][0] = distance[right][0];
 8000e0c:	edc3 6a00 	vstr	s13, [r3]
		distance[right][0] = temp;
 8000e10:	edc2 7a00 	vstr	s15, [r2]
		temp = distance[left][1];
 8000e14:	6858      	ldr	r0, [r3, #4]
		distance[left][1] = distance[right][1];
 8000e16:	6855      	ldr	r5, [r2, #4]
 8000e18:	605d      	str	r5, [r3, #4]
		left += 1;
 8000e1a:	3401      	adds	r4, #1
		distance[right][1] = temp;
 8000e1c:	6050      	str	r0, [r2, #4]
	while(left <= right){
 8000e1e:	42a1      	cmp	r1, r4
 8000e20:	db0f      	blt.n	8000e42 <kNN+0x1ae>
		if(distance[left][0] < pvoid){
 8000e22:	ab06      	add	r3, sp, #24
 8000e24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
		if(distance[right][0] > pvoid){
 8000e30:	aa06      	add	r2, sp, #24
		if(distance[left][0] < pvoid){
 8000e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(distance[right][0] > pvoid){
 8000e36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if(distance[left][0] < pvoid){
 8000e3a:	ddde      	ble.n	8000dfa <kNN+0x166>
			left += 1;
 8000e3c:	3401      	adds	r4, #1
	while(left <= right){
 8000e3e:	42a1      	cmp	r1, r4
 8000e40:	daef      	bge.n	8000e22 <kNN+0x18e>
	if (k <= right){
 8000e42:	9b01      	ldr	r3, [sp, #4]
 8000e44:	428b      	cmp	r3, r1
 8000e46:	dd48      	ble.n	8000eda <kNN+0x246>
	if (k >= left){
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	da3d      	bge.n	8000ec8 <kNN+0x234>
int kvote(float distance[][2], int k){
	int label[] = {0,0,0};
 8000e4c:	a803      	add	r0, sp, #12
 8000e4e:	2300      	movs	r3, #0
 8000e50:	6043      	str	r3, [r0, #4]
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	6083      	str	r3, [r0, #8]
	for(int i = 0; i < k ; i++){
 8000e56:	9b01      	ldr	r3, [sp, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	dd2d      	ble.n	8000eb8 <kNN+0x224>
 8000e5c:	aa06      	add	r2, sp, #24
 8000e5e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		int temp = distance[i][1];
 8000e62:	eddb 7a01 	vldr	s15, [fp, #4]
 8000e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e6a:	f10b 0b08 	add.w	fp, fp, #8
 8000e6e:	ee17 3a90 	vmov	r3, s15
		label[temp] ++;
 8000e72:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
	for(int i = 0; i < k ; i++){
 8000e76:	4559      	cmp	r1, fp
		label[temp] ++;
 8000e78:	f102 0201 	add.w	r2, r2, #1
 8000e7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for(int i = 0; i < k ; i++){
 8000e80:	d1ef      	bne.n	8000e62 <kNN+0x1ce>
	}
	int temp = 0;
	int ans = 0;
	for(int i = 0; i < 3 ; i++){
		if (label[i] > temp){
 8000e82:	e9d0 3100 	ldrd	r3, r1, [r0]
 8000e86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	6882      	ldr	r2, [r0, #8]
 8000e8e:	dd11      	ble.n	8000eb4 <kNN+0x220>
 8000e90:	4291      	cmp	r1, r2
 8000e92:	da07      	bge.n	8000ea4 <kNN+0x210>
	behavior_type(ans)
 8000e94:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <kNN+0x25c>)
}
 8000e96:	f50d 4d6b 	add.w	sp, sp, #60160	; 0xeb00
 8000e9a:	b011      	add	sp, #68	; 0x44
 8000e9c:	ecbd 8b06 	vpop	{d8-d10}
 8000ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	behavior_type(ans)
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <kNN+0x260>)
}
 8000ea6:	f50d 4d6b 	add.w	sp, sp, #60160	; 0xeb00
 8000eaa:	b011      	add	sp, #68	; 0x44
 8000eac:	ecbd 8b06 	vpop	{d8-d10}
 8000eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (label[i] > temp){
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	dbed      	blt.n	8000e94 <kNN+0x200>
	behavior_type(ans)
 8000eb8:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <kNN+0x264>)
}
 8000eba:	f50d 4d6b 	add.w	sp, sp, #60160	; 0xeb00
 8000ebe:	b011      	add	sp, #68	; 0x44
 8000ec0:	ecbd 8b06 	vpop	{d8-d10}
 8000ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (start == end){
 8000ec8:	f641 5164 	movw	r1, #7524	; 0x1d64
 8000ecc:	428c      	cmp	r4, r1
 8000ece:	d0bd      	beq.n	8000e4c <kNN+0x1b8>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	aa06      	add	r2, sp, #24
 8000ed4:	f7ff fe8c 	bl	8000bf0 <partition.part.0>
 8000ed8:	e7b8      	b.n	8000e4c <kNN+0x1b8>
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d0b4      	beq.n	8000e48 <kNN+0x1b4>
 8000ede:	aa06      	add	r2, sp, #24
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fe85 	bl	8000bf0 <partition.part.0>
 8000ee6:	9b01      	ldr	r3, [sp, #4]
 8000ee8:	e7ae      	b.n	8000e48 <kNN+0x1b4>
 8000eea:	bf00      	nop
 8000eec:	08003998 	.word	0x08003998
 8000ef0:	08003978 	.word	0x08003978
 8000ef4:	0800398c 	.word	0x0800398c
 8000ef8:	08003984 	.word	0x08003984
 8000efc:	0802fb10 	.word	0x0802fb10

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b510      	push	{r4, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f04:	2238      	movs	r2, #56	; 0x38
 8000f06:	2100      	movs	r1, #0
 8000f08:	a806      	add	r0, sp, #24
 8000f0a:	f000 fee1 	bl	8001cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0e:	2400      	movs	r4, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000f18:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000f1c:	9405      	str	r4, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1e:	f000 fa67 	bl	80013f0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f22:	2102      	movs	r1, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f24:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f28:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f30:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f32:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f000 fae2 	bl	80014fc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f38:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f3a:	2301      	movs	r3, #1
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f3c:	a801      	add	r0, sp, #4
 8000f3e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f40:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f46:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f4a:	f000 fd29 	bl	80019a0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f4e:	b014      	add	sp, #80	; 0x50
 8000f50:	bd10      	pop	{r4, pc}
 8000f52:	bf00      	nop

08000f54 <main>:
{
 8000f54:	b530      	push	{r4, r5, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	2400      	movs	r4, #0
{
 8000f58:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000f5a:	f000 f8df 	bl	800111c <HAL_Init>
  SystemClock_Config();
 8000f5e:	f7ff ffcf 	bl	8000f00 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000f66:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <main+0x68>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f70:	f042 0201 	orr.w	r2, r2, #1
 8000f74:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	9301      	str	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f7e:	4622      	mov	r2, r4
 8000f80:	2120      	movs	r1, #32
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f88:	f000 fa2c 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f8c:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	a902      	add	r1, sp, #8
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	e9cd 4404 	strd	r4, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f000 f945 	bl	800122c <HAL_GPIO_Init>
	  float test_data[6] = {0.019,-0.0,-1.56,0.021,-0.88,2};
 8000fa2:	4d07      	ldr	r5, [pc, #28]	; (8000fc0 <main+0x6c>)
 8000fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa6:	ac02      	add	r4, sp, #8
 8000fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000faa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fae:	e884 0003 	stmia.w	r4, {r0, r1}
	  drive_type = kNN(test_data, k);
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	a802      	add	r0, sp, #8
 8000fb6:	f7ff fe6d 	bl	8000c94 <kNN>
 8000fba:	e7f2      	b.n	8000fa2 <main+0x4e>
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	08003960 	.word	0x08003960

08000fc4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_MspInit+0x30>)
 8000fc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fc8:	f042 0201 	orr.w	r2, r2, #1
 8000fcc:	661a      	str	r2, [r3, #96]	; 0x60
 8000fce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000fd0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	f002 0201 	and.w	r2, r2, #1
 8000fd6:	9200      	str	r2, [sp, #0]
 8000fd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fe0:	659a      	str	r2, [r3, #88]	; 0x58
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fec:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fee:	f000 ba7d 	b.w	80014ec <HAL_PWREx_DisableUCPDDeadBattery>
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	e7fe      	b.n	8000ffc <HardFault_Handler>
 8000ffe:	bf00      	nop

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler>
 8001002:	bf00      	nop

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	e7fe      	b.n	8001004 <BusFault_Handler>
 8001006:	bf00      	nop

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler>
 800100a:	bf00      	nop

0800100c <SVC_Handler>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <DebugMon_Handler>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <PendSV_Handler>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 b894 	b.w	8001144 <HAL_IncTick>

0800101c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101e:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001020:	680b      	ldr	r3, [r1, #0]
{
 8001022:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4c0c      	ldr	r4, [pc, #48]	; (8001058 <_sbrk+0x3c>)
 8001026:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001028:	b12b      	cbz	r3, 8001036 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4418      	add	r0, r3
 800102c:	4290      	cmp	r0, r2
 800102e:	d807      	bhi.n	8001040 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001030:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <_sbrk+0x40>)
 8001038:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4418      	add	r0, r3
 800103c:	4290      	cmp	r0, r2
 800103e:	d9f7      	bls.n	8001030 <_sbrk+0x14>
    errno = ENOMEM;
 8001040:	f000 fe1c 	bl	8001c7c <__errno>
 8001044:	230c      	movs	r3, #12
 8001046:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd10      	pop	{r4, pc}
 8001050:	200001fc 	.word	0x200001fc
 8001054:	20020000 	.word	0x20020000
 8001058:	00000400 	.word	0x00000400
 800105c:	20000210 	.word	0x20000210

08001060 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SystemInit+0x18>)
 8001062:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001066:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800106a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800106e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001072:	6099      	str	r1, [r3, #8]
#endif
}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a6:	f7ff ffdb 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f000 fded 	bl	8001c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ae:	f7ff ff51 	bl	8000f54 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80010c0:	0802fd54 	.word	0x0802fd54
  ldr r2, =_sbss
 80010c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80010c8:	20000210 	.word	0x20000210

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_InitTick+0x40>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b90b      	cbnz	r3, 80010dc <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80010da:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010dc:	490d      	ldr	r1, [pc, #52]	; (8001114 <HAL_InitTick+0x44>)
 80010de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e2:	4605      	mov	r5, r0
 80010e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e8:	6808      	ldr	r0, [r1, #0]
 80010ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ee:	f000 f883 	bl	80011f8 <HAL_SYSTICK_Config>
 80010f2:	4604      	mov	r4, r0
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d1ef      	bne.n	80010d8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f8:	2d0f      	cmp	r5, #15
 80010fa:	d8ed      	bhi.n	80010d8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	4602      	mov	r2, r0
 80010fe:	4629      	mov	r1, r5
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f842 	bl	800118c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_InitTick+0x48>)
 800110a:	4620      	mov	r0, r4
 800110c:	601d      	str	r5, [r3, #0]
}
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	20000004 	.word	0x20000004
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008

0800111c <HAL_Init>:
{
 800111c:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111e:	2003      	movs	r0, #3
{
 8001120:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	f000 f821 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ffd2 	bl	80010d0 <HAL_InitTick>
 800112c:	b118      	cbz	r0, 8001136 <HAL_Init+0x1a>
    status = HAL_ERROR;
 800112e:	2001      	movs	r0, #1
}
 8001130:	b003      	add	sp, #12
 8001132:	f85d fb04 	ldr.w	pc, [sp], #4
 8001136:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8001138:	f7ff ff44 	bl	8000fc4 <HAL_MspInit>
 800113c:	9801      	ldr	r0, [sp, #4]
}
 800113e:	b003      	add	sp, #12
 8001140:	f85d fb04 	ldr.w	pc, [sp], #4

08001144 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x10>)
 8001146:	4904      	ldr	r1, [pc, #16]	; (8001158 <HAL_IncTick+0x14>)
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	6809      	ldr	r1, [r1, #0]
 800114c:	440b      	add	r3, r1
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000208 	.word	0x20000208
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800115c:	4b01      	ldr	r3, [pc, #4]	; (8001164 <HAL_GetTick+0x8>)
 800115e:	6818      	ldr	r0, [r3, #0]
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000208 	.word	0x20000208

08001168 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800116a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001170:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001172:	0200      	lsls	r0, r0, #8
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001180:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001182:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_NVIC_SetPriority+0x64>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001196:	f1c3 0507 	rsb	r5, r3, #7
 800119a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	bf28      	it	cs
 80011a2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a4:	2c06      	cmp	r4, #6
 80011a6:	d919      	bls.n	80011dc <HAL_NVIC_SetPriority+0x50>
 80011a8:	3b03      	subs	r3, #3
 80011aa:	f04f 34ff 	mov.w	r4, #4294967295
 80011ae:	409c      	lsls	r4, r3
 80011b0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	40aa      	lsls	r2, r5
 80011ba:	ea21 0102 	bic.w	r1, r1, r2
 80011be:	fa01 f203 	lsl.w	r2, r1, r3
 80011c2:	4322      	orrs	r2, r4
 80011c4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80011c6:	2800      	cmp	r0, #0
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	db0a      	blt.n	80011e2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80011d0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80011d4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011d8:	bc30      	pop	{r4, r5}
 80011da:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011dc:	2400      	movs	r4, #0
 80011de:	4623      	mov	r3, r4
 80011e0:	e7e8      	b.n	80011b4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_NVIC_SetPriority+0x68>)
 80011e4:	f000 000f 	and.w	r0, r0, #15
 80011e8:	4403      	add	r3, r0
 80011ea:	761a      	strb	r2, [r3, #24]
 80011ec:	bc30      	pop	{r4, r5}
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	e000ecfc 	.word	0xe000ecfc

080011f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	3801      	subs	r0, #1
 80011fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011fe:	d20e      	bcs.n	800121e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	4c08      	ldr	r4, [pc, #32]	; (8001228 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	20f0      	movs	r0, #240	; 0xf0
 800120a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001210:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001212:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800121c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2001      	movs	r0, #1
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001230:	f8d1 e000 	ldr.w	lr, [r1]
{
 8001234:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001236:	f1be 0f00 	cmp.w	lr, #0
 800123a:	f000 8081 	beq.w	8001340 <HAL_GPIO_Init+0x114>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800123e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80013e0 <HAL_GPIO_Init+0x1b4>
 8001242:	4688      	mov	r8, r1
  uint32_t position = 0x00U;
 8001244:	2600      	movs	r6, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001246:	2301      	movs	r3, #1
 8001248:	fa03 f206 	lsl.w	r2, r3, r6
    if (iocurrent != 0x00u)
 800124c:	ea12 070e 	ands.w	r7, r2, lr
 8001250:	d072      	beq.n	8001338 <HAL_GPIO_Init+0x10c>
 8001252:	e9d8 1401 	ldrd	r1, r4, [r8, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001256:	f021 0b10 	bic.w	fp, r1, #16
 800125a:	fa06 fc03 	lsl.w	ip, r6, r3
 800125e:	f10b 35ff 	add.w	r5, fp, #4294967295
 8001262:	2303      	movs	r3, #3
 8001264:	fa03 fa0c 	lsl.w	sl, r3, ip
 8001268:	2d01      	cmp	r5, #1
 800126a:	ea6f 0a0a 	mvn.w	sl, sl
 800126e:	fa04 f40c 	lsl.w	r4, r4, ip
 8001272:	d968      	bls.n	8001346 <HAL_GPIO_Init+0x11a>
      temp = GPIOx->PUPDR;
 8001274:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001276:	ea0a 0303 	and.w	r3, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800127a:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 800127c:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 800127e:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001284:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001288:	fa03 f30c 	lsl.w	r3, r3, ip
 800128c:	ea43 030a 	orr.w	r3, r3, sl
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001290:	00cd      	lsls	r5, r1, #3
      GPIOx->MODER = temp;
 8001292:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001294:	d550      	bpl.n	8001338 <HAL_GPIO_Init+0x10c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_GPIO_Init+0x19c>)
 8001298:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6613      	str	r3, [r2, #96]	; 0x60
 80012a0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80012a2:	f026 0403 	bic.w	r4, r6, #3
 80012a6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80012b2:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012b4:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c6:	ea25 0202 	bic.w	r2, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012ca:	d013      	beq.n	80012f4 <HAL_GPIO_Init+0xc8>
 80012cc:	4d3f      	ldr	r5, [pc, #252]	; (80013cc <HAL_GPIO_Init+0x1a0>)
 80012ce:	42a8      	cmp	r0, r5
 80012d0:	d06b      	beq.n	80013aa <HAL_GPIO_Init+0x17e>
 80012d2:	4d3f      	ldr	r5, [pc, #252]	; (80013d0 <HAL_GPIO_Init+0x1a4>)
 80012d4:	42a8      	cmp	r0, r5
 80012d6:	d063      	beq.n	80013a0 <HAL_GPIO_Init+0x174>
 80012d8:	4d3e      	ldr	r5, [pc, #248]	; (80013d4 <HAL_GPIO_Init+0x1a8>)
 80012da:	42a8      	cmp	r0, r5
 80012dc:	d06a      	beq.n	80013b4 <HAL_GPIO_Init+0x188>
 80012de:	4d3e      	ldr	r5, [pc, #248]	; (80013d8 <HAL_GPIO_Init+0x1ac>)
 80012e0:	42a8      	cmp	r0, r5
 80012e2:	d06c      	beq.n	80013be <HAL_GPIO_Init+0x192>
 80012e4:	4d3d      	ldr	r5, [pc, #244]	; (80013dc <HAL_GPIO_Init+0x1b0>)
 80012e6:	42a8      	cmp	r0, r5
 80012e8:	bf0c      	ite	eq
 80012ea:	2505      	moveq	r5, #5
 80012ec:	2506      	movne	r5, #6
 80012ee:	fa05 f303 	lsl.w	r3, r5, r3
 80012f2:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR1;
 80012f6:	f8d9 3000 	ldr.w	r3, [r9]
        temp &= ~(iocurrent);
 80012fa:	43fa      	mvns	r2, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fc:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 80012fe:	bf54      	ite	pl
 8001300:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001302:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 8001304:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->EMR1;
 8001308:	f8d9 3004 	ldr.w	r3, [r9, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130c:	038d      	lsls	r5, r1, #14
        temp &= ~(iocurrent);
 800130e:	bf54      	ite	pl
 8001310:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001312:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 8001314:	f8c9 3004 	str.w	r3, [r9, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001318:	f8d9 3008 	ldr.w	r3, [r9, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131c:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 800131e:	bf54      	ite	pl
 8001320:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001322:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 8001324:	f8c9 3008 	str.w	r3, [r9, #8]

        temp = EXTI->FTSR1;
 8001328:	f8d9 300c 	ldr.w	r3, [r9, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 800132e:	bf54      	ite	pl
 8001330:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001332:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 8001334:	f8c9 300c 	str.w	r3, [r9, #12]
      }
    }

    position++;
 8001338:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800133a:	fa3e f306 	lsrs.w	r3, lr, r6
 800133e:	d182      	bne.n	8001246 <HAL_GPIO_Init+0x1a>
  }
}
 8001340:	b003      	add	sp, #12
 8001342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001346:	6883      	ldr	r3, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001348:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800134c:	ea03 030a 	and.w	r3, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001350:	fa05 f50c 	lsl.w	r5, r5, ip
 8001354:	431d      	orrs	r5, r3
        GPIOx->OSPEEDR = temp;
 8001356:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001358:	6843      	ldr	r3, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800135a:	f3c1 1500 	ubfx	r5, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	ea23 0302 	bic.w	r3, r3, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001362:	462a      	mov	r2, r5
 8001364:	40b2      	lsls	r2, r6
 8001366:	431a      	orrs	r2, r3
        GPIOx->OTYPER = temp;
 8001368:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800136a:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800136c:	ea03 030a 	and.w	r3, r3, sl
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	431c      	orrs	r4, r3
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001372:	f1bb 0f02 	cmp.w	fp, #2
      GPIOx->PUPDR = temp;
 8001376:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001378:	d181      	bne.n	800127e <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3U];
 800137a:	08f4      	lsrs	r4, r6, #3
 800137c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001380:	f006 0307 	and.w	r3, r6, #7
        temp = GPIOx->AFR[position >> 3U];
 8001384:	6a25      	ldr	r5, [r4, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001386:	f8d8 2010 	ldr.w	r2, [r8, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	f04f 0b0f 	mov.w	fp, #15
 8001390:	fa0b fb03 	lsl.w	fp, fp, r3
 8001394:	ea25 050b 	bic.w	r5, r5, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001398:	409a      	lsls	r2, r3
 800139a:	432a      	orrs	r2, r5
        GPIOx->AFR[position >> 3U] = temp;
 800139c:	6222      	str	r2, [r4, #32]
 800139e:	e76e      	b.n	800127e <HAL_GPIO_Init+0x52>
 80013a0:	2502      	movs	r5, #2
 80013a2:	fa05 f303 	lsl.w	r3, r5, r3
 80013a6:	431a      	orrs	r2, r3
 80013a8:	e7a4      	b.n	80012f4 <HAL_GPIO_Init+0xc8>
 80013aa:	2501      	movs	r5, #1
 80013ac:	fa05 f303 	lsl.w	r3, r5, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	e79f      	b.n	80012f4 <HAL_GPIO_Init+0xc8>
 80013b4:	2503      	movs	r5, #3
 80013b6:	fa05 f303 	lsl.w	r3, r5, r3
 80013ba:	431a      	orrs	r2, r3
 80013bc:	e79a      	b.n	80012f4 <HAL_GPIO_Init+0xc8>
 80013be:	2504      	movs	r5, #4
 80013c0:	fa05 f303 	lsl.w	r3, r5, r3
 80013c4:	431a      	orrs	r2, r3
 80013c6:	e795      	b.n	80012f4 <HAL_GPIO_Init+0xc8>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48001400 	.word	0x48001400
 80013e0:	40010400 	.word	0x40010400

080013e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e4:	b90a      	cbnz	r2, 80013ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80013e8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ea:	6181      	str	r1, [r0, #24]
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013f0:	4a3b      	ldr	r2, [pc, #236]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 80013f2:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013f4:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013f6:	b968      	cbnz	r0, 8001414 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d014      	beq.n	800142c <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001402:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8001406:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800140a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800140e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8001412:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001414:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001418:	d02f      	beq.n	800147a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800141a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001424:	2000      	movs	r0, #0
}
 8001426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800142a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800142c:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001432:	482d      	ldr	r0, [pc, #180]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001434:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001438:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143c:	6811      	ldr	r1, [r2, #0]
 800143e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8001442:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001446:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001448:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800144c:	2332      	movs	r3, #50	; 0x32
 800144e:	fb03 f304 	mul.w	r3, r3, r4
 8001452:	fba0 0303 	umull	r0, r3, r0, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001458:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800145a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145e:	d506      	bpl.n	800146e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8001460:	e000      	b.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x74>
 8001462:	b123      	cbz	r3, 800146e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8001464:	6951      	ldr	r1, [r2, #20]
 8001466:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8001468:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146c:	d4f9      	bmi.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	055c      	lsls	r4, r3, #21
 8001474:	d5d6      	bpl.n	8001424 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8001476:	2003      	movs	r0, #3
 8001478:	e7d5      	b.n	8001426 <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800147a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001482:	d009      	beq.n	8001498 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001484:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8001488:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8001490:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001492:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8001496:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001498:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80014a4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	6811      	ldr	r1, [r2, #0]
 80014aa:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80014ae:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80014b2:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014b4:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014b8:	2332      	movs	r3, #50	; 0x32
 80014ba:	fb03 f304 	mul.w	r3, r3, r4
 80014be:	fba0 0303 	umull	r0, r3, r0, r3
 80014c2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014c6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ca:	d5d0      	bpl.n	800146e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80014cc:	e001      	b.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0cd      	beq.n	800146e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80014d2:	6951      	ldr	r1, [r2, #20]
 80014d4:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80014d6:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014da:	d5c8      	bpl.n	800146e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80014dc:	e7f7      	b.n	80014ce <HAL_PWREx_ControlVoltageScaling+0xde>
 80014de:	bf00      	nop
 80014e0:	40007000 	.word	0x40007000
 80014e4:	20000000 	.word	0x20000000
 80014e8:	431bde83 	.word	0x431bde83

080014ec <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014ec:	4a02      	ldr	r2, [pc, #8]	; (80014f8 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80014ee:	6893      	ldr	r3, [r2, #8]
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6093      	str	r3, [r2, #8]
}
 80014f6:	4770      	bx	lr
 80014f8:	40007000 	.word	0x40007000

080014fc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014fc:	2800      	cmp	r0, #0
 80014fe:	f000 816c 	beq.w	80017da <HAL_RCC_OscConfig+0x2de>
{
 8001502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001506:	6803      	ldr	r3, [r0, #0]
 8001508:	07d9      	lsls	r1, r3, #31
{
 800150a:	b082      	sub	sp, #8
 800150c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	d52d      	bpl.n	800156c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001510:	49b7      	ldr	r1, [pc, #732]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 8001512:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001514:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001516:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800151a:	2a0c      	cmp	r2, #12
 800151c:	f000 80f5 	beq.w	800170a <HAL_RCC_OscConfig+0x20e>
 8001520:	2a08      	cmp	r2, #8
 8001522:	f000 80f7 	beq.w	8001714 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	6863      	ldr	r3, [r4, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	f000 812e 	beq.w	800178c <HAL_RCC_OscConfig+0x290>
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	f000 81e0 	beq.w	80018f8 <HAL_RCC_OscConfig+0x3fc>
 8001538:	4dad      	ldr	r5, [pc, #692]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 800153a:	682a      	ldr	r2, [r5, #0]
 800153c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001540:	602a      	str	r2, [r5, #0]
 8001542:	682a      	ldr	r2, [r5, #0]
 8001544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001548:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 8123 	bne.w	8001796 <HAL_RCC_OscConfig+0x29a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fe04 	bl	800115c <HAL_GetTick>
 8001554:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001556:	e005      	b.n	8001564 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fe00 	bl	800115c <HAL_GetTick>
 800155c:	1b80      	subs	r0, r0, r6
 800155e:	2864      	cmp	r0, #100	; 0x64
 8001560:	f200 8137 	bhi.w	80017d2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	039f      	lsls	r7, r3, #14
 8001568:	d4f6      	bmi.n	8001558 <HAL_RCC_OscConfig+0x5c>
 800156a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156c:	079e      	lsls	r6, r3, #30
 800156e:	f100 80a5 	bmi.w	80016bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001572:	071a      	lsls	r2, r3, #28
 8001574:	d519      	bpl.n	80015aa <HAL_RCC_OscConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001576:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001578:	4d9d      	ldr	r5, [pc, #628]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80d7 	beq.w	800172e <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 8001580:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff fde6 	bl	800115c <HAL_GetTick>
 8001590:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001592:	e005      	b.n	80015a0 <HAL_RCC_OscConfig+0xa4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff fde2 	bl	800115c <HAL_GetTick>
 8001598:	1b80      	subs	r0, r0, r6
 800159a:	2802      	cmp	r0, #2
 800159c:	f200 8119 	bhi.w	80017d2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80015a4:	079f      	lsls	r7, r3, #30
 80015a6:	d5f5      	bpl.n	8001594 <HAL_RCC_OscConfig+0x98>
 80015a8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015aa:	0759      	lsls	r1, r3, #29
 80015ac:	d53f      	bpl.n	800162e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015ae:	4b90      	ldr	r3, [pc, #576]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 80015b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015b2:	00d2      	lsls	r2, r2, #3
 80015b4:	f100 812b 	bmi.w	800180e <HAL_RCC_OscConfig+0x312>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015be:	659a      	str	r2, [r3, #88]	; 0x58
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015ca:	2601      	movs	r6, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015cc:	4d89      	ldr	r5, [pc, #548]	; (80017f4 <HAL_RCC_OscConfig+0x2f8>)
 80015ce:	682a      	ldr	r2, [r5, #0]
 80015d0:	05d7      	lsls	r7, r2, #23
 80015d2:	f140 80ee 	bpl.w	80017b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d6:	68a3      	ldr	r3, [r4, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	f000 811a 	beq.w	8001812 <HAL_RCC_OscConfig+0x316>
 80015de:	2b05      	cmp	r3, #5
 80015e0:	f000 81cb 	beq.w	800197a <HAL_RCC_OscConfig+0x47e>
 80015e4:	4d82      	ldr	r5, [pc, #520]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 80015e6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 80015f2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80015f6:	f022 0204 	bic.w	r2, r2, #4
 80015fa:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 810e 	bne.w	8001820 <HAL_RCC_OscConfig+0x324>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fdaa 	bl	800115c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800160c:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800160e:	e006      	b.n	800161e <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001610:	f7ff fda4 	bl	800115c <HAL_GetTick>
 8001614:	eba0 0008 	sub.w	r0, r0, r8
 8001618:	42b8      	cmp	r0, r7
 800161a:	f200 80da 	bhi.w	80017d2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800161e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001622:	079a      	lsls	r2, r3, #30
 8001624:	d4f4      	bmi.n	8001610 <HAL_RCC_OscConfig+0x114>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001626:	2e00      	cmp	r6, #0
 8001628:	f040 8123 	bne.w	8001872 <HAL_RCC_OscConfig+0x376>
 800162c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800162e:	069b      	lsls	r3, r3, #26
 8001630:	d518      	bpl.n	8001664 <HAL_RCC_OscConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001632:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001634:	4d6e      	ldr	r5, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8107 	beq.w	800184a <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_HSI48_ENABLE();
 800163c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fd88 	bl	800115c <HAL_GetTick>
 800164c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800164e:	e005      	b.n	800165c <HAL_RCC_OscConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001650:	f7ff fd84 	bl	800115c <HAL_GetTick>
 8001654:	1b80      	subs	r0, r0, r6
 8001656:	2802      	cmp	r0, #2
 8001658:	f200 80bb 	bhi.w	80017d2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800165c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001660:	079f      	lsls	r7, r3, #30
 8001662:	d5f5      	bpl.n	8001650 <HAL_RCC_OscConfig+0x154>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001664:	69e0      	ldr	r0, [r4, #28]
 8001666:	b328      	cbz	r0, 80016b4 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001668:	4d61      	ldr	r5, [pc, #388]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 800166a:	68aa      	ldr	r2, [r5, #8]
 800166c:	f002 020c 	and.w	r2, r2, #12
 8001670:	2a0c      	cmp	r2, #12
 8001672:	f000 814e 	beq.w	8001912 <HAL_RCC_OscConfig+0x416>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	682a      	ldr	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001678:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800167a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800167e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001680:	f000 80fd 	beq.w	800187e <HAL_RCC_OscConfig+0x382>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001684:	68ea      	ldr	r2, [r5, #12]
 8001686:	f022 0203 	bic.w	r2, r2, #3
 800168a:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800168c:	68ea      	ldr	r2, [r5, #12]
 800168e:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8001692:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001696:	60ea      	str	r2, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fd60 	bl	800115c <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169c:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800169e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a0:	e005      	b.n	80016ae <HAL_RCC_OscConfig+0x1b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fd5b 	bl	800115c <HAL_GetTick>
 80016a6:	1b40      	subs	r0, r0, r5
 80016a8:	2802      	cmp	r0, #2
 80016aa:	f200 8092 	bhi.w	80017d2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	d4f6      	bmi.n	80016a2 <HAL_RCC_OscConfig+0x1a6>
      }
    }
  }
  }

  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
}
 80016b6:	b002      	add	sp, #8
 80016b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016bc:	4a4c      	ldr	r2, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 80016be:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c0:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d045      	beq.n	8001756 <HAL_RCC_OscConfig+0x25a>
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d047      	beq.n	800175e <HAL_RCC_OscConfig+0x262>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ce:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80016d0:	4d47      	ldr	r5, [pc, #284]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8083 	beq.w	80017de <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_HSI_ENABLE();
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016e0:	f7ff fd3c 	bl	800115c <HAL_GetTick>
 80016e4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e6:	e004      	b.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fd38 	bl	800115c <HAL_GetTick>
 80016ec:	1b80      	subs	r0, r0, r6
 80016ee:	2802      	cmp	r0, #2
 80016f0:	d86f      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	0558      	lsls	r0, r3, #21
 80016f6:	d5f7      	bpl.n	80016e8 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	686b      	ldr	r3, [r5, #4]
 80016fa:	6922      	ldr	r2, [r4, #16]
 80016fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001700:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001704:	606b      	str	r3, [r5, #4]
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	e733      	b.n	8001572 <HAL_RCC_OscConfig+0x76>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800170a:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800170e:	2903      	cmp	r1, #3
 8001710:	f47f af09 	bne.w	8001526 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	4a36      	ldr	r2, [pc, #216]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	0392      	lsls	r2, r2, #14
 800171a:	f57f af27 	bpl.w	800156c <HAL_RCC_OscConfig+0x70>
 800171e:	6862      	ldr	r2, [r4, #4]
 8001720:	2a00      	cmp	r2, #0
 8001722:	f47f af23 	bne.w	800156c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8001726:	2001      	movs	r0, #1
}
 8001728:	b002      	add	sp, #8
 800172a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800172e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800173a:	f7ff fd0f 	bl	800115c <HAL_GetTick>
 800173e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001740:	e004      	b.n	800174c <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff fd0b 	bl	800115c <HAL_GetTick>
 8001746:	1b80      	subs	r0, r0, r6
 8001748:	2802      	cmp	r0, #2
 800174a:	d842      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800174c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001750:	0798      	lsls	r0, r3, #30
 8001752:	d4f6      	bmi.n	8001742 <HAL_RCC_OscConfig+0x246>
 8001754:	e728      	b.n	80015a8 <HAL_RCC_OscConfig+0xac>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001756:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800175a:	2a02      	cmp	r2, #2
 800175c:	d1b7      	bne.n	80016ce <HAL_RCC_OscConfig+0x1d2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	055d      	lsls	r5, r3, #21
 8001764:	d502      	bpl.n	800176c <HAL_RCC_OscConfig+0x270>
 8001766:	68e3      	ldr	r3, [r4, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0dc      	beq.n	8001726 <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 800176e:	6920      	ldr	r0, [r4, #16]
 8001770:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001772:	4921      	ldr	r1, [pc, #132]	; (80017f8 <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001778:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800177c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800177e:	6808      	ldr	r0, [r1, #0]
 8001780:	f7ff fca6 	bl	80010d0 <HAL_InitTick>
 8001784:	2800      	cmp	r0, #0
 8001786:	d1ce      	bne.n	8001726 <HAL_RCC_OscConfig+0x22a>
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	e6f2      	b.n	8001572 <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
 800178e:	6813      	ldr	r3, [r2, #0]
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001796:	f7ff fce1 	bl	800115c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4d15      	ldr	r5, [pc, #84]	; (80017f0 <HAL_RCC_OscConfig+0x2f4>)
        tickstart = HAL_GetTick();
 800179c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179e:	e004      	b.n	80017aa <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fcdc 	bl	800115c <HAL_GetTick>
 80017a4:	1b80      	subs	r0, r0, r6
 80017a6:	2864      	cmp	r0, #100	; 0x64
 80017a8:	d813      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	039b      	lsls	r3, r3, #14
 80017ae:	d5f7      	bpl.n	80017a0 <HAL_RCC_OscConfig+0x2a4>
 80017b0:	e6db      	b.n	800156a <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b2:	682a      	ldr	r2, [r5, #0]
 80017b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017b8:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80017ba:	f7ff fccf 	bl	800115c <HAL_GetTick>
 80017be:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	05d8      	lsls	r0, r3, #23
 80017c4:	f53f af07 	bmi.w	80015d6 <HAL_RCC_OscConfig+0xda>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c8:	f7ff fcc8 	bl	800115c <HAL_GetTick>
 80017cc:	1bc0      	subs	r0, r0, r7
 80017ce:	2802      	cmp	r0, #2
 80017d0:	d9f6      	bls.n	80017c0 <HAL_RCC_OscConfig+0x2c4>
            return HAL_TIMEOUT;
 80017d2:	2003      	movs	r0, #3
}
 80017d4:	b002      	add	sp, #8
 80017d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80017da:	2001      	movs	r0, #1
}
 80017dc:	4770      	bx	lr
        __HAL_RCC_HSI_DISABLE();
 80017de:	682b      	ldr	r3, [r5, #0]
 80017e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017e6:	f7ff fcb9 	bl	800115c <HAL_GetTick>
 80017ea:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ec:	e00b      	b.n	8001806 <HAL_RCC_OscConfig+0x30a>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
 80017f8:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fcae 	bl	800115c <HAL_GetTick>
 8001800:	1b80      	subs	r0, r0, r6
 8001802:	2802      	cmp	r0, #2
 8001804:	d8e5      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	0559      	lsls	r1, r3, #21
 800180a:	d4f7      	bmi.n	80017fc <HAL_RCC_OscConfig+0x300>
 800180c:	e7bc      	b.n	8001788 <HAL_RCC_OscConfig+0x28c>
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2600      	movs	r6, #0
 8001810:	e6dc      	b.n	80015cc <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001812:	4a61      	ldr	r2, [pc, #388]	; (8001998 <HAL_RCC_OscConfig+0x49c>)
 8001814:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001820:	f7ff fc9c 	bl	800115c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001824:	4d5c      	ldr	r5, [pc, #368]	; (8001998 <HAL_RCC_OscConfig+0x49c>)
      tickstart = HAL_GetTick();
 8001826:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f241 3788 	movw	r7, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182c:	e005      	b.n	800183a <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fc95 	bl	800115c <HAL_GetTick>
 8001832:	eba0 0008 	sub.w	r0, r0, r8
 8001836:	42b8      	cmp	r0, r7
 8001838:	d8cb      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800183e:	0799      	lsls	r1, r3, #30
 8001840:	d5f5      	bpl.n	800182e <HAL_RCC_OscConfig+0x332>
    if (pwrclkchanged == SET)
 8001842:	2e00      	cmp	r6, #0
 8001844:	f43f aef2 	beq.w	800162c <HAL_RCC_OscConfig+0x130>
 8001848:	e013      	b.n	8001872 <HAL_RCC_OscConfig+0x376>
      __HAL_RCC_HSI48_DISABLE();
 800184a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001856:	f7ff fc81 	bl	800115c <HAL_GetTick>
 800185a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800185c:	e004      	b.n	8001868 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185e:	f7ff fc7d 	bl	800115c <HAL_GetTick>
 8001862:	1b80      	subs	r0, r0, r6
 8001864:	2802      	cmp	r0, #2
 8001866:	d8b4      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001868:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800186c:	0798      	lsls	r0, r3, #30
 800186e:	d4f6      	bmi.n	800185e <HAL_RCC_OscConfig+0x362>
 8001870:	e6f8      	b.n	8001664 <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4a49      	ldr	r2, [pc, #292]	; (8001998 <HAL_RCC_OscConfig+0x49c>)
 8001874:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187a:	6593      	str	r3, [r2, #88]	; 0x58
 800187c:	e6d6      	b.n	800162c <HAL_RCC_OscConfig+0x130>
        tickstart = HAL_GetTick();
 800187e:	f7ff fc6d 	bl	800115c <HAL_GetTick>
 8001882:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	e004      	b.n	8001890 <HAL_RCC_OscConfig+0x394>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fc69 	bl	800115c <HAL_GetTick>
 800188a:	1b80      	subs	r0, r0, r6
 800188c:	2802      	cmp	r0, #2
 800188e:	d8a0      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	0199      	lsls	r1, r3, #6
 8001894:	d4f7      	bmi.n	8001886 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001896:	68e9      	ldr	r1, [r5, #12]
 8001898:	4b40      	ldr	r3, [pc, #256]	; (800199c <HAL_RCC_OscConfig+0x4a0>)
 800189a:	6a22      	ldr	r2, [r4, #32]
 800189c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800189e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80018a2:	400b      	ands	r3, r1
 80018a4:	4313      	orrs	r3, r2
 80018a6:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80018aa:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80018ae:	3801      	subs	r0, #1
 80018b0:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80018b4:	0849      	lsrs	r1, r1, #1
 80018b6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80018ba:	3901      	subs	r1, #1
 80018bc:	0852      	lsrs	r2, r2, #1
 80018be:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80018c2:	3a01      	subs	r2, #1
 80018c4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80018c8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80018ca:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018cc:	4c32      	ldr	r4, [pc, #200]	; (8001998 <HAL_RCC_OscConfig+0x49c>)
        __HAL_RCC_PLL_ENABLE();
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d4:	68eb      	ldr	r3, [r5, #12]
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018da:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80018dc:	f7ff fc3e 	bl	800115c <HAL_GetTick>
 80018e0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	e005      	b.n	80018f0 <HAL_RCC_OscConfig+0x3f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fc3a 	bl	800115c <HAL_GetTick>
 80018e8:	1b40      	subs	r0, r0, r5
 80018ea:	2802      	cmp	r0, #2
 80018ec:	f63f af71 	bhi.w	80017d2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	019a      	lsls	r2, r3, #6
 80018f4:	d5f6      	bpl.n	80018e4 <HAL_RCC_OscConfig+0x3e8>
 80018f6:	e6dd      	b.n	80016b4 <HAL_RCC_OscConfig+0x1b8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018fc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e741      	b.n	8001796 <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001912:	2801      	cmp	r0, #1
 8001914:	f43f af08 	beq.w	8001728 <HAL_RCC_OscConfig+0x22c>
      temp_pllckcfg = RCC->PLLCFGR;
 8001918:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	6a22      	ldr	r2, [r4, #32]
 800191c:	f003 0103 	and.w	r1, r3, #3
 8001920:	4291      	cmp	r1, r2
 8001922:	f47f af00 	bne.w	8001726 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001926:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001928:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800192c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001932:	f47f aef8 	bne.w	8001726 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001936:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001940:	f47f aef1 	bne.w	8001726 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001944:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001946:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800194a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800194e:	f47f aeea 	bne.w	8001726 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001952:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800195c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001960:	f47f aee1 	bne.w	8001726 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001964:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001966:	0852      	lsrs	r2, r2, #1
 8001968:	3a01      	subs	r2, #1
 800196a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8001972:	bf14      	ite	ne
 8001974:	2001      	movne	r0, #1
 8001976:	2000      	moveq	r0, #0
 8001978:	e6d6      	b.n	8001728 <HAL_RCC_OscConfig+0x22c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HAL_RCC_OscConfig+0x49c>)
 800197c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001980:	f042 0204 	orr.w	r2, r2, #4
 8001984:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001988:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001994:	e744      	b.n	8001820 <HAL_RCC_OscConfig+0x324>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	019f800c 	.word	0x019f800c

080019a0 <HAL_RCC_ClockConfig>:
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a0:	2800      	cmp	r0, #0
 80019a2:	f000 8105 	beq.w	8001bb0 <HAL_RCC_ClockConfig+0x210>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a6:	4aad      	ldr	r2, [pc, #692]	; (8001c5c <HAL_RCC_ClockConfig+0x2bc>)
{
 80019a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	6813      	ldr	r3, [r2, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	428b      	cmp	r3, r1
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	f023 030f 	bic.w	r3, r3, #15
 80019bc:	430b      	orrs	r3, r1
 80019be:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c0:	6813      	ldr	r3, [r2, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	428b      	cmp	r3, r1
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
}
 80019cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d0:	6803      	ldr	r3, [r0, #0]
 80019d2:	07df      	lsls	r7, r3, #31
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	f140 8088 	bpl.w	8001aec <HAL_RCC_ClockConfig+0x14c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019dc:	6842      	ldr	r2, [r0, #4]
 80019de:	2a03      	cmp	r2, #3
 80019e0:	f000 80ad 	beq.w	8001b3e <HAL_RCC_ClockConfig+0x19e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e4:	4b9e      	ldr	r3, [pc, #632]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e8:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	f000 80ff 	beq.w	8001bec <HAL_RCC_ClockConfig+0x24c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ee:	055b      	lsls	r3, r3, #21
 80019f0:	d5eb      	bpl.n	80019ca <HAL_RCC_ClockConfig+0x2a>
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019f2:	4b9b      	ldr	r3, [pc, #620]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 80019f4:	6899      	ldr	r1, [r3, #8]
 80019f6:	f001 010c 	and.w	r1, r1, #12
 80019fa:	2904      	cmp	r1, #4
 80019fc:	d00a      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	f001 010c 	and.w	r1, r1, #12
 8001a04:	2908      	cmp	r1, #8
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a08:	6899      	ldr	r1, [r3, #8]
 8001a0a:	f001 010c 	and.w	r1, r1, #12
 8001a0e:	290c      	cmp	r1, #12
 8001a10:	f000 80fb 	beq.w	8001c0a <HAL_RCC_ClockConfig+0x26a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a14:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a18:	4e91      	ldr	r6, [pc, #580]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001a1a:	68b3      	ldr	r3, [r6, #8]
 8001a1c:	f023 0303 	bic.w	r3, r3, #3
 8001a20:	431a      	orrs	r2, r3
 8001a22:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8001a24:	f7ff fb9a 	bl	800115c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a2c:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	e005      	b.n	8001a3c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff fb94 	bl	800115c <HAL_GetTick>
 8001a34:	eba0 0009 	sub.w	r0, r0, r9
 8001a38:	42b8      	cmp	r0, r7
 8001a3a:	d874      	bhi.n	8001b26 <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3c:	68b3      	ldr	r3, [r6, #8]
 8001a3e:	6862      	ldr	r2, [r4, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a48:	d1f2      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	079f      	lsls	r7, r3, #30
 8001a4e:	f140 80d3 	bpl.w	8001bf8 <HAL_RCC_ClockConfig+0x258>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a52:	0758      	lsls	r0, r3, #29
 8001a54:	d504      	bpl.n	8001a60 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a56:	4982      	ldr	r1, [pc, #520]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001a58:	688a      	ldr	r2, [r1, #8]
 8001a5a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001a5e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a60:	0719      	lsls	r1, r3, #28
 8001a62:	d506      	bpl.n	8001a72 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a64:	4a7e      	ldr	r2, [pc, #504]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a6c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a70:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a72:	4a7b      	ldr	r2, [pc, #492]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001a74:	68a1      	ldr	r1, [r4, #8]
 8001a76:	6893      	ldr	r3, [r2, #8]
 8001a78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4e76      	ldr	r6, [pc, #472]	; (8001c5c <HAL_RCC_ClockConfig+0x2bc>)
 8001a82:	6832      	ldr	r2, [r6, #0]
 8001a84:	f002 020f 	and.w	r2, r2, #15
 8001a88:	42aa      	cmp	r2, r5
 8001a8a:	d837      	bhi.n	8001afc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	075a      	lsls	r2, r3, #29
 8001a90:	d506      	bpl.n	8001aa0 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a92:	4973      	ldr	r1, [pc, #460]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001a94:	68e0      	ldr	r0, [r4, #12]
 8001a96:	688a      	ldr	r2, [r1, #8]
 8001a98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a9c:	4302      	orrs	r2, r0
 8001a9e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	071b      	lsls	r3, r3, #28
 8001aa2:	d443      	bmi.n	8001b2c <HAL_RCC_ClockConfig+0x18c>
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001aa4:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001aa6:	6893      	ldr	r3, [r2, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	f000 80d3 	beq.w	8001c58 <HAL_RCC_ClockConfig+0x2b8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ab2:	6893      	ldr	r3, [r2, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	f000 809b 	beq.w	8001bf4 <HAL_RCC_ClockConfig+0x254>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001abe:	6893      	ldr	r3, [r2, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	d075      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x214>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8001ac8:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aca:	4a65      	ldr	r2, [pc, #404]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001acc:	4c65      	ldr	r4, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x2c4>)
 8001ace:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 8001ad0:	4865      	ldr	r0, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x2c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad2:	4966      	ldr	r1, [pc, #408]	; (8001c6c <HAL_RCC_ClockConfig+0x2cc>)
  return HAL_InitTick(uwTickPrio);
 8001ad4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001ada:	5ca2      	ldrb	r2, [r4, r2]
 8001adc:	f002 021f 	and.w	r2, r2, #31
 8001ae0:	40d3      	lsrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
}
 8001ae4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8001ae8:	f7ff baf2 	b.w	80010d0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	079e      	lsls	r6, r3, #30
 8001aee:	d4b0      	bmi.n	8001a52 <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af0:	4e5a      	ldr	r6, [pc, #360]	; (8001c5c <HAL_RCC_ClockConfig+0x2bc>)
 8001af2:	6832      	ldr	r2, [r6, #0]
 8001af4:	f002 020f 	and.w	r2, r2, #15
 8001af8:	42aa      	cmp	r2, r5
 8001afa:	d9c7      	bls.n	8001a8c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afc:	6832      	ldr	r2, [r6, #0]
 8001afe:	f022 020f 	bic.w	r2, r2, #15
 8001b02:	432a      	orrs	r2, r5
 8001b04:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 8001b06:	f7ff fb29 	bl	800115c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b0e:	4680      	mov	r8, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b10:	6833      	ldr	r3, [r6, #0]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	42ab      	cmp	r3, r5
 8001b18:	d0b8      	beq.n	8001a8c <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff fb1f 	bl	800115c <HAL_GetTick>
 8001b1e:	eba0 0008 	sub.w	r0, r0, r8
 8001b22:	42b8      	cmp	r0, r7
 8001b24:	d9f4      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x170>
        return HAL_TIMEOUT;
 8001b26:	2003      	movs	r0, #3
}
 8001b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001b2e:	6921      	ldr	r1, [r4, #16]
 8001b30:	6893      	ldr	r3, [r2, #8]
 8001b32:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b3a:	6093      	str	r3, [r2, #8]
 8001b3c:	e7b2      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x104>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	4948      	ldr	r1, [pc, #288]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001b40:	6808      	ldr	r0, [r1, #0]
 8001b42:	0180      	lsls	r0, r0, #6
 8001b44:	f57f af41 	bpl.w	80019ca <HAL_RCC_ClockConfig+0x2a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b48:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b4a:	68c8      	ldr	r0, [r1, #12]
      if(pllfreq > 80000000U)
 8001b4c:	4f48      	ldr	r7, [pc, #288]	; (8001c70 <HAL_RCC_ClockConfig+0x2d0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b4e:	f006 0603 	and.w	r6, r6, #3

  switch (pllsource)
 8001b52:	2e03      	cmp	r6, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b54:	68ce      	ldr	r6, [r1, #12]
 8001b56:	bf0c      	ite	eq
 8001b58:	4946      	ldreq	r1, [pc, #280]	; (8001c74 <HAL_RCC_ClockConfig+0x2d4>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b5a:	4947      	ldrne	r1, [pc, #284]	; (8001c78 <HAL_RCC_ClockConfig+0x2d8>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b5c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001b60:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b62:	fbb1 f1f0 	udiv	r1, r1, r0
 8001b66:	f3c6 2006 	ubfx	r0, r6, #8, #7
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b6a:	4e3d      	ldr	r6, [pc, #244]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b6c:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b70:	68f0      	ldr	r0, [r6, #12]
 8001b72:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8001b76:	3001      	adds	r0, #1
 8001b78:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8001b7a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	f67f af48 	bls.w	8001a14 <HAL_RCC_ClockConfig+0x74>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b84:	68b1      	ldr	r1, [r6, #8]
 8001b86:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8001b8a:	d007      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x1fc>
 8001b8c:	f013 0802 	ands.w	r8, r3, #2
 8001b90:	f43f af42 	beq.w	8001a18 <HAL_RCC_ClockConfig+0x78>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b94:	68a3      	ldr	r3, [r4, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f47f af3c 	bne.w	8001a14 <HAL_RCC_ClockConfig+0x74>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b9c:	4930      	ldr	r1, [pc, #192]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001b9e:	688b      	ldr	r3, [r1, #8]
 8001ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba8:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001baa:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001bae:	e733      	b.n	8001a18 <HAL_RCC_ClockConfig+0x78>
    return HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
}
 8001bb2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bb4:	68d0      	ldr	r0, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb6:	68d3      	ldr	r3, [r2, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb8:	68d2      	ldr	r2, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bba:	f000 0003 	and.w	r0, r0, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 8001bc2:	2803      	cmp	r0, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc4:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc8:	f103 0101 	add.w	r1, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bcc:	bf0c      	ite	eq
 8001bce:	4b29      	ldreq	r3, [pc, #164]	; (8001c74 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd0:	4b29      	ldrne	r3, [pc, #164]	; (8001c78 <HAL_RCC_ClockConfig+0x2d8>)
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fb03 f302 	mul.w	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8001be2:	3201      	adds	r2, #1
 8001be4:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco/pllr;
 8001be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bea:	e76e      	b.n	8001aca <HAL_RCC_ClockConfig+0x12a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bec:	0399      	lsls	r1, r3, #14
 8001bee:	f53f af00 	bmi.w	80019f2 <HAL_RCC_ClockConfig+0x52>
 8001bf2:	e6ea      	b.n	80019ca <HAL_RCC_ClockConfig+0x2a>
    sysclockfreq = HSE_VALUE;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_RCC_ClockConfig+0x2d4>)
 8001bf6:	e768      	b.n	8001aca <HAL_RCC_ClockConfig+0x12a>
    if(hpre == RCC_SYSCLK_DIV2)
 8001bf8:	f1b8 0f00 	cmp.w	r8, #0
 8001bfc:	f43f af40 	beq.w	8001a80 <HAL_RCC_ClockConfig+0xe0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c00:	68b3      	ldr	r3, [r6, #8]
 8001c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c06:	60b3      	str	r3, [r6, #8]
 8001c08:	e73a      	b.n	8001a80 <HAL_RCC_ClockConfig+0xe0>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c0a:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c0c:	68d9      	ldr	r1, [r3, #12]
      if(pllfreq > 80000000U)
 8001c0e:	4e18      	ldr	r6, [pc, #96]	; (8001c70 <HAL_RCC_ClockConfig+0x2d0>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c10:	f000 0003 	and.w	r0, r0, #3
    switch (pllsource)
 8001c14:	2803      	cmp	r0, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c16:	68d8      	ldr	r0, [r3, #12]
 8001c18:	bf0c      	ite	eq
 8001c1a:	4b16      	ldreq	r3, [pc, #88]	; (8001c74 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c1c:	4b16      	ldrne	r3, [pc, #88]	; (8001c78 <HAL_RCC_ClockConfig+0x2d8>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c1e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8001c22:	3101      	adds	r1, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c24:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c28:	f3c0 2106 	ubfx	r1, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <HAL_RCC_ClockConfig+0x2c0>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2e:	fb03 f301 	mul.w	r3, r3, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c32:	68c1      	ldr	r1, [r0, #12]
 8001c34:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8001c38:	3101      	adds	r1, #1
 8001c3a:	0049      	lsls	r1, r1, #1
    sysclockfreq = pllvco/pllr;
 8001c3c:	fbb3 f3f1 	udiv	r3, r3, r1
      if(pllfreq > 80000000U)
 8001c40:	42b3      	cmp	r3, r6
 8001c42:	f67f aee7 	bls.w	8001a14 <HAL_RCC_ClockConfig+0x74>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c46:	6883      	ldr	r3, [r0, #8]
 8001c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c50:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c52:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001c56:	e6df      	b.n	8001a18 <HAL_RCC_ClockConfig+0x78>
    sysclockfreq = HSI_VALUE;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_RCC_ClockConfig+0x2d8>)
 8001c5a:	e736      	b.n	8001aca <HAL_RCC_ClockConfig+0x12a>
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	0802fb10 	.word	0x0802fb10
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	04c4b400 	.word	0x04c4b400
 8001c74:	007a1200 	.word	0x007a1200
 8001c78:	00f42400 	.word	0x00f42400

08001c7c <__errno>:
 8001c7c:	4b01      	ldr	r3, [pc, #4]	; (8001c84 <__errno+0x8>)
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000000c 	.word	0x2000000c

08001c88 <__libc_init_array>:
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	4e0d      	ldr	r6, [pc, #52]	; (8001cc0 <__libc_init_array+0x38>)
 8001c8c:	4c0d      	ldr	r4, [pc, #52]	; (8001cc4 <__libc_init_array+0x3c>)
 8001c8e:	1ba4      	subs	r4, r4, r6
 8001c90:	10a4      	asrs	r4, r4, #2
 8001c92:	2500      	movs	r5, #0
 8001c94:	42a5      	cmp	r5, r4
 8001c96:	d109      	bne.n	8001cac <__libc_init_array+0x24>
 8001c98:	4e0b      	ldr	r6, [pc, #44]	; (8001cc8 <__libc_init_array+0x40>)
 8001c9a:	4c0c      	ldr	r4, [pc, #48]	; (8001ccc <__libc_init_array+0x44>)
 8001c9c:	f001 fe52 	bl	8003944 <_init>
 8001ca0:	1ba4      	subs	r4, r4, r6
 8001ca2:	10a4      	asrs	r4, r4, #2
 8001ca4:	2500      	movs	r5, #0
 8001ca6:	42a5      	cmp	r5, r4
 8001ca8:	d105      	bne.n	8001cb6 <__libc_init_array+0x2e>
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
 8001cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cb0:	4798      	blx	r3
 8001cb2:	3501      	adds	r5, #1
 8001cb4:	e7ee      	b.n	8001c94 <__libc_init_array+0xc>
 8001cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cba:	4798      	blx	r3
 8001cbc:	3501      	adds	r5, #1
 8001cbe:	e7f2      	b.n	8001ca6 <__libc_init_array+0x1e>
 8001cc0:	0802fd4c 	.word	0x0802fd4c
 8001cc4:	0802fd4c 	.word	0x0802fd4c
 8001cc8:	0802fd4c 	.word	0x0802fd4c
 8001ccc:	0802fd50 	.word	0x0802fd50

08001cd0 <memset>:
 8001cd0:	4402      	add	r2, r0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d100      	bne.n	8001cda <memset+0xa>
 8001cd8:	4770      	bx	lr
 8001cda:	f803 1b01 	strb.w	r1, [r3], #1
 8001cde:	e7f9      	b.n	8001cd4 <memset+0x4>

08001ce0 <__cvt>:
 8001ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ce4:	ec55 4b10 	vmov	r4, r5, d0
 8001ce8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001cea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001cee:	2d00      	cmp	r5, #0
 8001cf0:	460e      	mov	r6, r1
 8001cf2:	4691      	mov	r9, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	bfb8      	it	lt
 8001cf8:	4622      	movlt	r2, r4
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	f027 0720 	bic.w	r7, r7, #32
 8001d00:	bfbb      	ittet	lt
 8001d02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001d06:	461d      	movlt	r5, r3
 8001d08:	2300      	movge	r3, #0
 8001d0a:	232d      	movlt	r3, #45	; 0x2d
 8001d0c:	bfb8      	it	lt
 8001d0e:	4614      	movlt	r4, r2
 8001d10:	2f46      	cmp	r7, #70	; 0x46
 8001d12:	700b      	strb	r3, [r1, #0]
 8001d14:	d004      	beq.n	8001d20 <__cvt+0x40>
 8001d16:	2f45      	cmp	r7, #69	; 0x45
 8001d18:	d100      	bne.n	8001d1c <__cvt+0x3c>
 8001d1a:	3601      	adds	r6, #1
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	e000      	b.n	8001d22 <__cvt+0x42>
 8001d20:	2103      	movs	r1, #3
 8001d22:	ab03      	add	r3, sp, #12
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	ab02      	add	r3, sp, #8
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4632      	mov	r2, r6
 8001d2c:	4653      	mov	r3, sl
 8001d2e:	ec45 4b10 	vmov	d0, r4, r5
 8001d32:	f000 fbad 	bl	8002490 <_dtoa_r>
 8001d36:	2f47      	cmp	r7, #71	; 0x47
 8001d38:	4680      	mov	r8, r0
 8001d3a:	d102      	bne.n	8001d42 <__cvt+0x62>
 8001d3c:	f019 0f01 	tst.w	r9, #1
 8001d40:	d026      	beq.n	8001d90 <__cvt+0xb0>
 8001d42:	2f46      	cmp	r7, #70	; 0x46
 8001d44:	eb08 0906 	add.w	r9, r8, r6
 8001d48:	d111      	bne.n	8001d6e <__cvt+0x8e>
 8001d4a:	f898 3000 	ldrb.w	r3, [r8]
 8001d4e:	2b30      	cmp	r3, #48	; 0x30
 8001d50:	d10a      	bne.n	8001d68 <__cvt+0x88>
 8001d52:	2200      	movs	r2, #0
 8001d54:	2300      	movs	r3, #0
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	f7fe fe89 	bl	8000a70 <__aeabi_dcmpeq>
 8001d5e:	b918      	cbnz	r0, 8001d68 <__cvt+0x88>
 8001d60:	f1c6 0601 	rsb	r6, r6, #1
 8001d64:	f8ca 6000 	str.w	r6, [sl]
 8001d68:	f8da 3000 	ldr.w	r3, [sl]
 8001d6c:	4499      	add	r9, r3
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2300      	movs	r3, #0
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe fe7b 	bl	8000a70 <__aeabi_dcmpeq>
 8001d7a:	b938      	cbnz	r0, 8001d8c <__cvt+0xac>
 8001d7c:	2230      	movs	r2, #48	; 0x30
 8001d7e:	9b03      	ldr	r3, [sp, #12]
 8001d80:	454b      	cmp	r3, r9
 8001d82:	d205      	bcs.n	8001d90 <__cvt+0xb0>
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	9103      	str	r1, [sp, #12]
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e7f8      	b.n	8001d7e <__cvt+0x9e>
 8001d8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8001d90:	9b03      	ldr	r3, [sp, #12]
 8001d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001d94:	eba3 0308 	sub.w	r3, r3, r8
 8001d98:	4640      	mov	r0, r8
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	b004      	add	sp, #16
 8001d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001da2 <__exponent>:
 8001da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001da4:	2900      	cmp	r1, #0
 8001da6:	4604      	mov	r4, r0
 8001da8:	bfba      	itte	lt
 8001daa:	4249      	neglt	r1, r1
 8001dac:	232d      	movlt	r3, #45	; 0x2d
 8001dae:	232b      	movge	r3, #43	; 0x2b
 8001db0:	2909      	cmp	r1, #9
 8001db2:	f804 2b02 	strb.w	r2, [r4], #2
 8001db6:	7043      	strb	r3, [r0, #1]
 8001db8:	dd20      	ble.n	8001dfc <__exponent+0x5a>
 8001dba:	f10d 0307 	add.w	r3, sp, #7
 8001dbe:	461f      	mov	r7, r3
 8001dc0:	260a      	movs	r6, #10
 8001dc2:	fb91 f5f6 	sdiv	r5, r1, r6
 8001dc6:	fb06 1115 	mls	r1, r6, r5, r1
 8001dca:	3130      	adds	r1, #48	; 0x30
 8001dcc:	2d09      	cmp	r5, #9
 8001dce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001dd2:	f103 32ff 	add.w	r2, r3, #4294967295
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	dc09      	bgt.n	8001dee <__exponent+0x4c>
 8001dda:	3130      	adds	r1, #48	; 0x30
 8001ddc:	3b02      	subs	r3, #2
 8001dde:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001de2:	42bb      	cmp	r3, r7
 8001de4:	4622      	mov	r2, r4
 8001de6:	d304      	bcc.n	8001df2 <__exponent+0x50>
 8001de8:	1a10      	subs	r0, r2, r0
 8001dea:	b003      	add	sp, #12
 8001dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dee:	4613      	mov	r3, r2
 8001df0:	e7e7      	b.n	8001dc2 <__exponent+0x20>
 8001df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001df6:	f804 2b01 	strb.w	r2, [r4], #1
 8001dfa:	e7f2      	b.n	8001de2 <__exponent+0x40>
 8001dfc:	2330      	movs	r3, #48	; 0x30
 8001dfe:	4419      	add	r1, r3
 8001e00:	7083      	strb	r3, [r0, #2]
 8001e02:	1d02      	adds	r2, r0, #4
 8001e04:	70c1      	strb	r1, [r0, #3]
 8001e06:	e7ef      	b.n	8001de8 <__exponent+0x46>

08001e08 <_printf_float>:
 8001e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e0c:	b08d      	sub	sp, #52	; 0x34
 8001e0e:	460c      	mov	r4, r1
 8001e10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001e14:	4616      	mov	r6, r2
 8001e16:	461f      	mov	r7, r3
 8001e18:	4605      	mov	r5, r0
 8001e1a:	f001 f8f1 	bl	8003000 <_localeconv_r>
 8001e1e:	6803      	ldr	r3, [r0, #0]
 8001e20:	9304      	str	r3, [sp, #16]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe f9f8 	bl	8000218 <strlen>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8001e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8001e30:	9005      	str	r0, [sp, #20]
 8001e32:	3307      	adds	r3, #7
 8001e34:	f023 0307 	bic.w	r3, r3, #7
 8001e38:	f103 0208 	add.w	r2, r3, #8
 8001e3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001e40:	f8d4 b000 	ldr.w	fp, [r4]
 8001e44:	f8c8 2000 	str.w	r2, [r8]
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001e50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8001e54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001e58:	9307      	str	r3, [sp, #28]
 8001e5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e62:	4ba7      	ldr	r3, [pc, #668]	; (8002100 <_printf_float+0x2f8>)
 8001e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001e68:	f7fe fe34 	bl	8000ad4 <__aeabi_dcmpun>
 8001e6c:	bb70      	cbnz	r0, 8001ecc <_printf_float+0xc4>
 8001e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e72:	4ba3      	ldr	r3, [pc, #652]	; (8002100 <_printf_float+0x2f8>)
 8001e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001e78:	f7fe fe0e 	bl	8000a98 <__aeabi_dcmple>
 8001e7c:	bb30      	cbnz	r0, 8001ecc <_printf_float+0xc4>
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2300      	movs	r3, #0
 8001e82:	4640      	mov	r0, r8
 8001e84:	4649      	mov	r1, r9
 8001e86:	f7fe fdfd 	bl	8000a84 <__aeabi_dcmplt>
 8001e8a:	b110      	cbz	r0, 8001e92 <_printf_float+0x8a>
 8001e8c:	232d      	movs	r3, #45	; 0x2d
 8001e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e92:	4a9c      	ldr	r2, [pc, #624]	; (8002104 <_printf_float+0x2fc>)
 8001e94:	4b9c      	ldr	r3, [pc, #624]	; (8002108 <_printf_float+0x300>)
 8001e96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8001e9a:	bf8c      	ite	hi
 8001e9c:	4690      	movhi	r8, r2
 8001e9e:	4698      	movls	r8, r3
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f02b 0204 	bic.w	r2, fp, #4
 8001ea6:	6123      	str	r3, [r4, #16]
 8001ea8:	6022      	str	r2, [r4, #0]
 8001eaa:	f04f 0900 	mov.w	r9, #0
 8001eae:	9700      	str	r7, [sp, #0]
 8001eb0:	4633      	mov	r3, r6
 8001eb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	f000 f9e6 	bl	8002288 <_printf_common>
 8001ebc:	3001      	adds	r0, #1
 8001ebe:	f040 808d 	bne.w	8001fdc <_printf_float+0x1d4>
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	b00d      	add	sp, #52	; 0x34
 8001ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ecc:	4642      	mov	r2, r8
 8001ece:	464b      	mov	r3, r9
 8001ed0:	4640      	mov	r0, r8
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	f7fe fdfe 	bl	8000ad4 <__aeabi_dcmpun>
 8001ed8:	b110      	cbz	r0, 8001ee0 <_printf_float+0xd8>
 8001eda:	4a8c      	ldr	r2, [pc, #560]	; (800210c <_printf_float+0x304>)
 8001edc:	4b8c      	ldr	r3, [pc, #560]	; (8002110 <_printf_float+0x308>)
 8001ede:	e7da      	b.n	8001e96 <_printf_float+0x8e>
 8001ee0:	6861      	ldr	r1, [r4, #4]
 8001ee2:	1c4b      	adds	r3, r1, #1
 8001ee4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8001ee8:	a80a      	add	r0, sp, #40	; 0x28
 8001eea:	d13e      	bne.n	8001f6a <_printf_float+0x162>
 8001eec:	2306      	movs	r3, #6
 8001eee:	6063      	str	r3, [r4, #4]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8001ef6:	ab09      	add	r3, sp, #36	; 0x24
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	ec49 8b10 	vmov	d0, r8, r9
 8001efe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001f02:	6022      	str	r2, [r4, #0]
 8001f04:	f8cd a004 	str.w	sl, [sp, #4]
 8001f08:	6861      	ldr	r1, [r4, #4]
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	f7ff fee8 	bl	8001ce0 <__cvt>
 8001f10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8001f14:	2b47      	cmp	r3, #71	; 0x47
 8001f16:	4680      	mov	r8, r0
 8001f18:	d109      	bne.n	8001f2e <_printf_float+0x126>
 8001f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f1c:	1cd8      	adds	r0, r3, #3
 8001f1e:	db02      	blt.n	8001f26 <_printf_float+0x11e>
 8001f20:	6862      	ldr	r2, [r4, #4]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	dd47      	ble.n	8001fb6 <_printf_float+0x1ae>
 8001f26:	f1aa 0a02 	sub.w	sl, sl, #2
 8001f2a:	fa5f fa8a 	uxtb.w	sl, sl
 8001f2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8001f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001f34:	d824      	bhi.n	8001f80 <_printf_float+0x178>
 8001f36:	3901      	subs	r1, #1
 8001f38:	4652      	mov	r2, sl
 8001f3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001f3e:	9109      	str	r1, [sp, #36]	; 0x24
 8001f40:	f7ff ff2f 	bl	8001da2 <__exponent>
 8001f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001f46:	1813      	adds	r3, r2, r0
 8001f48:	2a01      	cmp	r2, #1
 8001f4a:	4681      	mov	r9, r0
 8001f4c:	6123      	str	r3, [r4, #16]
 8001f4e:	dc02      	bgt.n	8001f56 <_printf_float+0x14e>
 8001f50:	6822      	ldr	r2, [r4, #0]
 8001f52:	07d1      	lsls	r1, r2, #31
 8001f54:	d501      	bpl.n	8001f5a <_printf_float+0x152>
 8001f56:	3301      	adds	r3, #1
 8001f58:	6123      	str	r3, [r4, #16]
 8001f5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0a5      	beq.n	8001eae <_printf_float+0xa6>
 8001f62:	232d      	movs	r3, #45	; 0x2d
 8001f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f68:	e7a1      	b.n	8001eae <_printf_float+0xa6>
 8001f6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8001f6e:	f000 8177 	beq.w	8002260 <_printf_float+0x458>
 8001f72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8001f76:	d1bb      	bne.n	8001ef0 <_printf_float+0xe8>
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	d1b9      	bne.n	8001ef0 <_printf_float+0xe8>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e7b6      	b.n	8001eee <_printf_float+0xe6>
 8001f80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8001f84:	d119      	bne.n	8001fba <_printf_float+0x1b2>
 8001f86:	2900      	cmp	r1, #0
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	dd0c      	ble.n	8001fa6 <_printf_float+0x19e>
 8001f8c:	6121      	str	r1, [r4, #16]
 8001f8e:	b913      	cbnz	r3, 8001f96 <_printf_float+0x18e>
 8001f90:	6822      	ldr	r2, [r4, #0]
 8001f92:	07d2      	lsls	r2, r2, #31
 8001f94:	d502      	bpl.n	8001f9c <_printf_float+0x194>
 8001f96:	3301      	adds	r3, #1
 8001f98:	440b      	add	r3, r1
 8001f9a:	6123      	str	r3, [r4, #16]
 8001f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fa0:	f04f 0900 	mov.w	r9, #0
 8001fa4:	e7d9      	b.n	8001f5a <_printf_float+0x152>
 8001fa6:	b913      	cbnz	r3, 8001fae <_printf_float+0x1a6>
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	07d0      	lsls	r0, r2, #31
 8001fac:	d501      	bpl.n	8001fb2 <_printf_float+0x1aa>
 8001fae:	3302      	adds	r3, #2
 8001fb0:	e7f3      	b.n	8001f9a <_printf_float+0x192>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e7f1      	b.n	8001f9a <_printf_float+0x192>
 8001fb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8001fba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	db05      	blt.n	8001fce <_printf_float+0x1c6>
 8001fc2:	6822      	ldr	r2, [r4, #0]
 8001fc4:	6123      	str	r3, [r4, #16]
 8001fc6:	07d1      	lsls	r1, r2, #31
 8001fc8:	d5e8      	bpl.n	8001f9c <_printf_float+0x194>
 8001fca:	3301      	adds	r3, #1
 8001fcc:	e7e5      	b.n	8001f9a <_printf_float+0x192>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bfd4      	ite	le
 8001fd2:	f1c3 0302 	rsble	r3, r3, #2
 8001fd6:	2301      	movgt	r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	e7de      	b.n	8001f9a <_printf_float+0x192>
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	055a      	lsls	r2, r3, #21
 8001fe0:	d407      	bmi.n	8001ff2 <_printf_float+0x1ea>
 8001fe2:	6923      	ldr	r3, [r4, #16]
 8001fe4:	4642      	mov	r2, r8
 8001fe6:	4631      	mov	r1, r6
 8001fe8:	4628      	mov	r0, r5
 8001fea:	47b8      	blx	r7
 8001fec:	3001      	adds	r0, #1
 8001fee:	d12b      	bne.n	8002048 <_printf_float+0x240>
 8001ff0:	e767      	b.n	8001ec2 <_printf_float+0xba>
 8001ff2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8001ff6:	f240 80dc 	bls.w	80021b2 <_printf_float+0x3aa>
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002002:	f7fe fd35 	bl	8000a70 <__aeabi_dcmpeq>
 8002006:	2800      	cmp	r0, #0
 8002008:	d033      	beq.n	8002072 <_printf_float+0x26a>
 800200a:	2301      	movs	r3, #1
 800200c:	4a41      	ldr	r2, [pc, #260]	; (8002114 <_printf_float+0x30c>)
 800200e:	4631      	mov	r1, r6
 8002010:	4628      	mov	r0, r5
 8002012:	47b8      	blx	r7
 8002014:	3001      	adds	r0, #1
 8002016:	f43f af54 	beq.w	8001ec2 <_printf_float+0xba>
 800201a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800201e:	429a      	cmp	r2, r3
 8002020:	db02      	blt.n	8002028 <_printf_float+0x220>
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	07d8      	lsls	r0, r3, #31
 8002026:	d50f      	bpl.n	8002048 <_printf_float+0x240>
 8002028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800202c:	4631      	mov	r1, r6
 800202e:	4628      	mov	r0, r5
 8002030:	47b8      	blx	r7
 8002032:	3001      	adds	r0, #1
 8002034:	f43f af45 	beq.w	8001ec2 <_printf_float+0xba>
 8002038:	f04f 0800 	mov.w	r8, #0
 800203c:	f104 091a 	add.w	r9, r4, #26
 8002040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002042:	3b01      	subs	r3, #1
 8002044:	4543      	cmp	r3, r8
 8002046:	dc09      	bgt.n	800205c <_printf_float+0x254>
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	079b      	lsls	r3, r3, #30
 800204c:	f100 8103 	bmi.w	8002256 <_printf_float+0x44e>
 8002050:	68e0      	ldr	r0, [r4, #12]
 8002052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002054:	4298      	cmp	r0, r3
 8002056:	bfb8      	it	lt
 8002058:	4618      	movlt	r0, r3
 800205a:	e734      	b.n	8001ec6 <_printf_float+0xbe>
 800205c:	2301      	movs	r3, #1
 800205e:	464a      	mov	r2, r9
 8002060:	4631      	mov	r1, r6
 8002062:	4628      	mov	r0, r5
 8002064:	47b8      	blx	r7
 8002066:	3001      	adds	r0, #1
 8002068:	f43f af2b 	beq.w	8001ec2 <_printf_float+0xba>
 800206c:	f108 0801 	add.w	r8, r8, #1
 8002070:	e7e6      	b.n	8002040 <_printf_float+0x238>
 8002072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	dc2b      	bgt.n	80020d0 <_printf_float+0x2c8>
 8002078:	2301      	movs	r3, #1
 800207a:	4a26      	ldr	r2, [pc, #152]	; (8002114 <_printf_float+0x30c>)
 800207c:	4631      	mov	r1, r6
 800207e:	4628      	mov	r0, r5
 8002080:	47b8      	blx	r7
 8002082:	3001      	adds	r0, #1
 8002084:	f43f af1d 	beq.w	8001ec2 <_printf_float+0xba>
 8002088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800208a:	b923      	cbnz	r3, 8002096 <_printf_float+0x28e>
 800208c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800208e:	b913      	cbnz	r3, 8002096 <_printf_float+0x28e>
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	07d9      	lsls	r1, r3, #31
 8002094:	d5d8      	bpl.n	8002048 <_printf_float+0x240>
 8002096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800209a:	4631      	mov	r1, r6
 800209c:	4628      	mov	r0, r5
 800209e:	47b8      	blx	r7
 80020a0:	3001      	adds	r0, #1
 80020a2:	f43f af0e 	beq.w	8001ec2 <_printf_float+0xba>
 80020a6:	f04f 0900 	mov.w	r9, #0
 80020aa:	f104 0a1a 	add.w	sl, r4, #26
 80020ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020b0:	425b      	negs	r3, r3
 80020b2:	454b      	cmp	r3, r9
 80020b4:	dc01      	bgt.n	80020ba <_printf_float+0x2b2>
 80020b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020b8:	e794      	b.n	8001fe4 <_printf_float+0x1dc>
 80020ba:	2301      	movs	r3, #1
 80020bc:	4652      	mov	r2, sl
 80020be:	4631      	mov	r1, r6
 80020c0:	4628      	mov	r0, r5
 80020c2:	47b8      	blx	r7
 80020c4:	3001      	adds	r0, #1
 80020c6:	f43f aefc 	beq.w	8001ec2 <_printf_float+0xba>
 80020ca:	f109 0901 	add.w	r9, r9, #1
 80020ce:	e7ee      	b.n	80020ae <_printf_float+0x2a6>
 80020d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80020d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020d4:	429a      	cmp	r2, r3
 80020d6:	bfa8      	it	ge
 80020d8:	461a      	movge	r2, r3
 80020da:	2a00      	cmp	r2, #0
 80020dc:	4691      	mov	r9, r2
 80020de:	dd07      	ble.n	80020f0 <_printf_float+0x2e8>
 80020e0:	4613      	mov	r3, r2
 80020e2:	4631      	mov	r1, r6
 80020e4:	4642      	mov	r2, r8
 80020e6:	4628      	mov	r0, r5
 80020e8:	47b8      	blx	r7
 80020ea:	3001      	adds	r0, #1
 80020ec:	f43f aee9 	beq.w	8001ec2 <_printf_float+0xba>
 80020f0:	f104 031a 	add.w	r3, r4, #26
 80020f4:	f04f 0b00 	mov.w	fp, #0
 80020f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80020fc:	9306      	str	r3, [sp, #24]
 80020fe:	e015      	b.n	800212c <_printf_float+0x324>
 8002100:	7fefffff 	.word	0x7fefffff
 8002104:	0802fb24 	.word	0x0802fb24
 8002108:	0802fb20 	.word	0x0802fb20
 800210c:	0802fb2c 	.word	0x0802fb2c
 8002110:	0802fb28 	.word	0x0802fb28
 8002114:	0802fb30 	.word	0x0802fb30
 8002118:	2301      	movs	r3, #1
 800211a:	9a06      	ldr	r2, [sp, #24]
 800211c:	4631      	mov	r1, r6
 800211e:	4628      	mov	r0, r5
 8002120:	47b8      	blx	r7
 8002122:	3001      	adds	r0, #1
 8002124:	f43f aecd 	beq.w	8001ec2 <_printf_float+0xba>
 8002128:	f10b 0b01 	add.w	fp, fp, #1
 800212c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002130:	ebaa 0309 	sub.w	r3, sl, r9
 8002134:	455b      	cmp	r3, fp
 8002136:	dcef      	bgt.n	8002118 <_printf_float+0x310>
 8002138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800213c:	429a      	cmp	r2, r3
 800213e:	44d0      	add	r8, sl
 8002140:	db15      	blt.n	800216e <_printf_float+0x366>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	07da      	lsls	r2, r3, #31
 8002146:	d412      	bmi.n	800216e <_printf_float+0x366>
 8002148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800214a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800214c:	eba3 020a 	sub.w	r2, r3, sl
 8002150:	eba3 0a01 	sub.w	sl, r3, r1
 8002154:	4592      	cmp	sl, r2
 8002156:	bfa8      	it	ge
 8002158:	4692      	movge	sl, r2
 800215a:	f1ba 0f00 	cmp.w	sl, #0
 800215e:	dc0e      	bgt.n	800217e <_printf_float+0x376>
 8002160:	f04f 0800 	mov.w	r8, #0
 8002164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002168:	f104 091a 	add.w	r9, r4, #26
 800216c:	e019      	b.n	80021a2 <_printf_float+0x39a>
 800216e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002172:	4631      	mov	r1, r6
 8002174:	4628      	mov	r0, r5
 8002176:	47b8      	blx	r7
 8002178:	3001      	adds	r0, #1
 800217a:	d1e5      	bne.n	8002148 <_printf_float+0x340>
 800217c:	e6a1      	b.n	8001ec2 <_printf_float+0xba>
 800217e:	4653      	mov	r3, sl
 8002180:	4642      	mov	r2, r8
 8002182:	4631      	mov	r1, r6
 8002184:	4628      	mov	r0, r5
 8002186:	47b8      	blx	r7
 8002188:	3001      	adds	r0, #1
 800218a:	d1e9      	bne.n	8002160 <_printf_float+0x358>
 800218c:	e699      	b.n	8001ec2 <_printf_float+0xba>
 800218e:	2301      	movs	r3, #1
 8002190:	464a      	mov	r2, r9
 8002192:	4631      	mov	r1, r6
 8002194:	4628      	mov	r0, r5
 8002196:	47b8      	blx	r7
 8002198:	3001      	adds	r0, #1
 800219a:	f43f ae92 	beq.w	8001ec2 <_printf_float+0xba>
 800219e:	f108 0801 	add.w	r8, r8, #1
 80021a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	eba3 030a 	sub.w	r3, r3, sl
 80021ac:	4543      	cmp	r3, r8
 80021ae:	dcee      	bgt.n	800218e <_printf_float+0x386>
 80021b0:	e74a      	b.n	8002048 <_printf_float+0x240>
 80021b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021b4:	2a01      	cmp	r2, #1
 80021b6:	dc01      	bgt.n	80021bc <_printf_float+0x3b4>
 80021b8:	07db      	lsls	r3, r3, #31
 80021ba:	d53a      	bpl.n	8002232 <_printf_float+0x42a>
 80021bc:	2301      	movs	r3, #1
 80021be:	4642      	mov	r2, r8
 80021c0:	4631      	mov	r1, r6
 80021c2:	4628      	mov	r0, r5
 80021c4:	47b8      	blx	r7
 80021c6:	3001      	adds	r0, #1
 80021c8:	f43f ae7b 	beq.w	8001ec2 <_printf_float+0xba>
 80021cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80021d0:	4631      	mov	r1, r6
 80021d2:	4628      	mov	r0, r5
 80021d4:	47b8      	blx	r7
 80021d6:	3001      	adds	r0, #1
 80021d8:	f108 0801 	add.w	r8, r8, #1
 80021dc:	f43f ae71 	beq.w	8001ec2 <_printf_float+0xba>
 80021e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021e2:	2200      	movs	r2, #0
 80021e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80021e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80021ec:	2300      	movs	r3, #0
 80021ee:	f7fe fc3f 	bl	8000a70 <__aeabi_dcmpeq>
 80021f2:	b9c8      	cbnz	r0, 8002228 <_printf_float+0x420>
 80021f4:	4653      	mov	r3, sl
 80021f6:	4642      	mov	r2, r8
 80021f8:	4631      	mov	r1, r6
 80021fa:	4628      	mov	r0, r5
 80021fc:	47b8      	blx	r7
 80021fe:	3001      	adds	r0, #1
 8002200:	d10e      	bne.n	8002220 <_printf_float+0x418>
 8002202:	e65e      	b.n	8001ec2 <_printf_float+0xba>
 8002204:	2301      	movs	r3, #1
 8002206:	4652      	mov	r2, sl
 8002208:	4631      	mov	r1, r6
 800220a:	4628      	mov	r0, r5
 800220c:	47b8      	blx	r7
 800220e:	3001      	adds	r0, #1
 8002210:	f43f ae57 	beq.w	8001ec2 <_printf_float+0xba>
 8002214:	f108 0801 	add.w	r8, r8, #1
 8002218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800221a:	3b01      	subs	r3, #1
 800221c:	4543      	cmp	r3, r8
 800221e:	dcf1      	bgt.n	8002204 <_printf_float+0x3fc>
 8002220:	464b      	mov	r3, r9
 8002222:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002226:	e6de      	b.n	8001fe6 <_printf_float+0x1de>
 8002228:	f04f 0800 	mov.w	r8, #0
 800222c:	f104 0a1a 	add.w	sl, r4, #26
 8002230:	e7f2      	b.n	8002218 <_printf_float+0x410>
 8002232:	2301      	movs	r3, #1
 8002234:	e7df      	b.n	80021f6 <_printf_float+0x3ee>
 8002236:	2301      	movs	r3, #1
 8002238:	464a      	mov	r2, r9
 800223a:	4631      	mov	r1, r6
 800223c:	4628      	mov	r0, r5
 800223e:	47b8      	blx	r7
 8002240:	3001      	adds	r0, #1
 8002242:	f43f ae3e 	beq.w	8001ec2 <_printf_float+0xba>
 8002246:	f108 0801 	add.w	r8, r8, #1
 800224a:	68e3      	ldr	r3, [r4, #12]
 800224c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	4543      	cmp	r3, r8
 8002252:	dcf0      	bgt.n	8002236 <_printf_float+0x42e>
 8002254:	e6fc      	b.n	8002050 <_printf_float+0x248>
 8002256:	f04f 0800 	mov.w	r8, #0
 800225a:	f104 0919 	add.w	r9, r4, #25
 800225e:	e7f4      	b.n	800224a <_printf_float+0x442>
 8002260:	2900      	cmp	r1, #0
 8002262:	f43f ae8b 	beq.w	8001f7c <_printf_float+0x174>
 8002266:	2300      	movs	r3, #0
 8002268:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800226c:	ab09      	add	r3, sp, #36	; 0x24
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	ec49 8b10 	vmov	d0, r8, r9
 8002274:	6022      	str	r2, [r4, #0]
 8002276:	f8cd a004 	str.w	sl, [sp, #4]
 800227a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800227e:	4628      	mov	r0, r5
 8002280:	f7ff fd2e 	bl	8001ce0 <__cvt>
 8002284:	4680      	mov	r8, r0
 8002286:	e648      	b.n	8001f1a <_printf_float+0x112>

08002288 <_printf_common>:
 8002288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800228c:	4691      	mov	r9, r2
 800228e:	461f      	mov	r7, r3
 8002290:	688a      	ldr	r2, [r1, #8]
 8002292:	690b      	ldr	r3, [r1, #16]
 8002294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002298:	4293      	cmp	r3, r2
 800229a:	bfb8      	it	lt
 800229c:	4613      	movlt	r3, r2
 800229e:	f8c9 3000 	str.w	r3, [r9]
 80022a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022a6:	4606      	mov	r6, r0
 80022a8:	460c      	mov	r4, r1
 80022aa:	b112      	cbz	r2, 80022b2 <_printf_common+0x2a>
 80022ac:	3301      	adds	r3, #1
 80022ae:	f8c9 3000 	str.w	r3, [r9]
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	0699      	lsls	r1, r3, #26
 80022b6:	bf42      	ittt	mi
 80022b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80022bc:	3302      	addmi	r3, #2
 80022be:	f8c9 3000 	strmi.w	r3, [r9]
 80022c2:	6825      	ldr	r5, [r4, #0]
 80022c4:	f015 0506 	ands.w	r5, r5, #6
 80022c8:	d107      	bne.n	80022da <_printf_common+0x52>
 80022ca:	f104 0a19 	add.w	sl, r4, #25
 80022ce:	68e3      	ldr	r3, [r4, #12]
 80022d0:	f8d9 2000 	ldr.w	r2, [r9]
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	42ab      	cmp	r3, r5
 80022d8:	dc28      	bgt.n	800232c <_printf_common+0xa4>
 80022da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80022de:	6822      	ldr	r2, [r4, #0]
 80022e0:	3300      	adds	r3, #0
 80022e2:	bf18      	it	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	0692      	lsls	r2, r2, #26
 80022e8:	d42d      	bmi.n	8002346 <_printf_common+0xbe>
 80022ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022ee:	4639      	mov	r1, r7
 80022f0:	4630      	mov	r0, r6
 80022f2:	47c0      	blx	r8
 80022f4:	3001      	adds	r0, #1
 80022f6:	d020      	beq.n	800233a <_printf_common+0xb2>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	68e5      	ldr	r5, [r4, #12]
 80022fc:	f8d9 2000 	ldr.w	r2, [r9]
 8002300:	f003 0306 	and.w	r3, r3, #6
 8002304:	2b04      	cmp	r3, #4
 8002306:	bf08      	it	eq
 8002308:	1aad      	subeq	r5, r5, r2
 800230a:	68a3      	ldr	r3, [r4, #8]
 800230c:	6922      	ldr	r2, [r4, #16]
 800230e:	bf0c      	ite	eq
 8002310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002314:	2500      	movne	r5, #0
 8002316:	4293      	cmp	r3, r2
 8002318:	bfc4      	itt	gt
 800231a:	1a9b      	subgt	r3, r3, r2
 800231c:	18ed      	addgt	r5, r5, r3
 800231e:	f04f 0900 	mov.w	r9, #0
 8002322:	341a      	adds	r4, #26
 8002324:	454d      	cmp	r5, r9
 8002326:	d11a      	bne.n	800235e <_printf_common+0xd6>
 8002328:	2000      	movs	r0, #0
 800232a:	e008      	b.n	800233e <_printf_common+0xb6>
 800232c:	2301      	movs	r3, #1
 800232e:	4652      	mov	r2, sl
 8002330:	4639      	mov	r1, r7
 8002332:	4630      	mov	r0, r6
 8002334:	47c0      	blx	r8
 8002336:	3001      	adds	r0, #1
 8002338:	d103      	bne.n	8002342 <_printf_common+0xba>
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
 800233e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002342:	3501      	adds	r5, #1
 8002344:	e7c3      	b.n	80022ce <_printf_common+0x46>
 8002346:	18e1      	adds	r1, r4, r3
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	2030      	movs	r0, #48	; 0x30
 800234c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002350:	4422      	add	r2, r4
 8002352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800235a:	3302      	adds	r3, #2
 800235c:	e7c5      	b.n	80022ea <_printf_common+0x62>
 800235e:	2301      	movs	r3, #1
 8002360:	4622      	mov	r2, r4
 8002362:	4639      	mov	r1, r7
 8002364:	4630      	mov	r0, r6
 8002366:	47c0      	blx	r8
 8002368:	3001      	adds	r0, #1
 800236a:	d0e6      	beq.n	800233a <_printf_common+0xb2>
 800236c:	f109 0901 	add.w	r9, r9, #1
 8002370:	e7d8      	b.n	8002324 <_printf_common+0x9c>

08002372 <quorem>:
 8002372:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002376:	6903      	ldr	r3, [r0, #16]
 8002378:	690c      	ldr	r4, [r1, #16]
 800237a:	42a3      	cmp	r3, r4
 800237c:	4680      	mov	r8, r0
 800237e:	f2c0 8082 	blt.w	8002486 <quorem+0x114>
 8002382:	3c01      	subs	r4, #1
 8002384:	f101 0714 	add.w	r7, r1, #20
 8002388:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800238c:	f100 0614 	add.w	r6, r0, #20
 8002390:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002394:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002398:	eb06 030c 	add.w	r3, r6, ip
 800239c:	3501      	adds	r5, #1
 800239e:	eb07 090c 	add.w	r9, r7, ip
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	fbb0 f5f5 	udiv	r5, r0, r5
 80023a8:	b395      	cbz	r5, 8002410 <quorem+0x9e>
 80023aa:	f04f 0a00 	mov.w	sl, #0
 80023ae:	4638      	mov	r0, r7
 80023b0:	46b6      	mov	lr, r6
 80023b2:	46d3      	mov	fp, sl
 80023b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80023b8:	b293      	uxth	r3, r2
 80023ba:	fb05 a303 	mla	r3, r5, r3, sl
 80023be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	ebab 0303 	sub.w	r3, fp, r3
 80023c8:	0c12      	lsrs	r2, r2, #16
 80023ca:	f8de b000 	ldr.w	fp, [lr]
 80023ce:	fb05 a202 	mla	r2, r5, r2, sl
 80023d2:	fa13 f38b 	uxtah	r3, r3, fp
 80023d6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80023da:	fa1f fb82 	uxth.w	fp, r2
 80023de:	f8de 2000 	ldr.w	r2, [lr]
 80023e2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80023e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023f0:	4581      	cmp	r9, r0
 80023f2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80023f6:	f84e 3b04 	str.w	r3, [lr], #4
 80023fa:	d2db      	bcs.n	80023b4 <quorem+0x42>
 80023fc:	f856 300c 	ldr.w	r3, [r6, ip]
 8002400:	b933      	cbnz	r3, 8002410 <quorem+0x9e>
 8002402:	9b01      	ldr	r3, [sp, #4]
 8002404:	3b04      	subs	r3, #4
 8002406:	429e      	cmp	r6, r3
 8002408:	461a      	mov	r2, r3
 800240a:	d330      	bcc.n	800246e <quorem+0xfc>
 800240c:	f8c8 4010 	str.w	r4, [r8, #16]
 8002410:	4640      	mov	r0, r8
 8002412:	f001 f82b 	bl	800346c <__mcmp>
 8002416:	2800      	cmp	r0, #0
 8002418:	db25      	blt.n	8002466 <quorem+0xf4>
 800241a:	3501      	adds	r5, #1
 800241c:	4630      	mov	r0, r6
 800241e:	f04f 0c00 	mov.w	ip, #0
 8002422:	f857 2b04 	ldr.w	r2, [r7], #4
 8002426:	f8d0 e000 	ldr.w	lr, [r0]
 800242a:	b293      	uxth	r3, r2
 800242c:	ebac 0303 	sub.w	r3, ip, r3
 8002430:	0c12      	lsrs	r2, r2, #16
 8002432:	fa13 f38e 	uxtah	r3, r3, lr
 8002436:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800243a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800243e:	b29b      	uxth	r3, r3
 8002440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002444:	45b9      	cmp	r9, r7
 8002446:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800244a:	f840 3b04 	str.w	r3, [r0], #4
 800244e:	d2e8      	bcs.n	8002422 <quorem+0xb0>
 8002450:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002454:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002458:	b92a      	cbnz	r2, 8002466 <quorem+0xf4>
 800245a:	3b04      	subs	r3, #4
 800245c:	429e      	cmp	r6, r3
 800245e:	461a      	mov	r2, r3
 8002460:	d30b      	bcc.n	800247a <quorem+0x108>
 8002462:	f8c8 4010 	str.w	r4, [r8, #16]
 8002466:	4628      	mov	r0, r5
 8002468:	b003      	add	sp, #12
 800246a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	3b04      	subs	r3, #4
 8002472:	2a00      	cmp	r2, #0
 8002474:	d1ca      	bne.n	800240c <quorem+0x9a>
 8002476:	3c01      	subs	r4, #1
 8002478:	e7c5      	b.n	8002406 <quorem+0x94>
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	3b04      	subs	r3, #4
 800247e:	2a00      	cmp	r2, #0
 8002480:	d1ef      	bne.n	8002462 <quorem+0xf0>
 8002482:	3c01      	subs	r4, #1
 8002484:	e7ea      	b.n	800245c <quorem+0xea>
 8002486:	2000      	movs	r0, #0
 8002488:	e7ee      	b.n	8002468 <quorem+0xf6>
 800248a:	0000      	movs	r0, r0
 800248c:	0000      	movs	r0, r0
	...

08002490 <_dtoa_r>:
 8002490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002494:	ec57 6b10 	vmov	r6, r7, d0
 8002498:	b097      	sub	sp, #92	; 0x5c
 800249a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800249c:	9106      	str	r1, [sp, #24]
 800249e:	4604      	mov	r4, r0
 80024a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80024a2:	9312      	str	r3, [sp, #72]	; 0x48
 80024a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80024a8:	e9cd 6700 	strd	r6, r7, [sp]
 80024ac:	b93d      	cbnz	r5, 80024be <_dtoa_r+0x2e>
 80024ae:	2010      	movs	r0, #16
 80024b0:	f000 fdb4 	bl	800301c <malloc>
 80024b4:	6260      	str	r0, [r4, #36]	; 0x24
 80024b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80024ba:	6005      	str	r5, [r0, #0]
 80024bc:	60c5      	str	r5, [r0, #12]
 80024be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	b151      	cbz	r1, 80024da <_dtoa_r+0x4a>
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	604a      	str	r2, [r1, #4]
 80024c8:	2301      	movs	r3, #1
 80024ca:	4093      	lsls	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
 80024ce:	4620      	mov	r0, r4
 80024d0:	f000 fdeb 	bl	80030aa <_Bfree>
 80024d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	1e3b      	subs	r3, r7, #0
 80024dc:	bfbb      	ittet	lt
 80024de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80024e2:	9301      	strlt	r3, [sp, #4]
 80024e4:	2300      	movge	r3, #0
 80024e6:	2201      	movlt	r2, #1
 80024e8:	bfac      	ite	ge
 80024ea:	f8c8 3000 	strge.w	r3, [r8]
 80024ee:	f8c8 2000 	strlt.w	r2, [r8]
 80024f2:	4baf      	ldr	r3, [pc, #700]	; (80027b0 <_dtoa_r+0x320>)
 80024f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80024f8:	ea33 0308 	bics.w	r3, r3, r8
 80024fc:	d114      	bne.n	8002528 <_dtoa_r+0x98>
 80024fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002500:	f242 730f 	movw	r3, #9999	; 0x270f
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	9b00      	ldr	r3, [sp, #0]
 8002508:	b923      	cbnz	r3, 8002514 <_dtoa_r+0x84>
 800250a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800250e:	2800      	cmp	r0, #0
 8002510:	f000 8542 	beq.w	8002f98 <_dtoa_r+0xb08>
 8002514:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002516:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80027c4 <_dtoa_r+0x334>
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8544 	beq.w	8002fa8 <_dtoa_r+0xb18>
 8002520:	f10b 0303 	add.w	r3, fp, #3
 8002524:	f000 bd3e 	b.w	8002fa4 <_dtoa_r+0xb14>
 8002528:	e9dd 6700 	ldrd	r6, r7, [sp]
 800252c:	2200      	movs	r2, #0
 800252e:	2300      	movs	r3, #0
 8002530:	4630      	mov	r0, r6
 8002532:	4639      	mov	r1, r7
 8002534:	f7fe fa9c 	bl	8000a70 <__aeabi_dcmpeq>
 8002538:	4681      	mov	r9, r0
 800253a:	b168      	cbz	r0, 8002558 <_dtoa_r+0xc8>
 800253c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800253e:	2301      	movs	r3, #1
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8524 	beq.w	8002f92 <_dtoa_r+0xb02>
 800254a:	4b9a      	ldr	r3, [pc, #616]	; (80027b4 <_dtoa_r+0x324>)
 800254c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800254e:	f103 3bff 	add.w	fp, r3, #4294967295
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	f000 bd28 	b.w	8002fa8 <_dtoa_r+0xb18>
 8002558:	aa14      	add	r2, sp, #80	; 0x50
 800255a:	a915      	add	r1, sp, #84	; 0x54
 800255c:	ec47 6b10 	vmov	d0, r6, r7
 8002560:	4620      	mov	r0, r4
 8002562:	f000 fffa 	bl	800355a <__d2b>
 8002566:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800256a:	9004      	str	r0, [sp, #16]
 800256c:	2d00      	cmp	r5, #0
 800256e:	d07c      	beq.n	800266a <_dtoa_r+0x1da>
 8002570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002574:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8002578:	46b2      	mov	sl, r6
 800257a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800257e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002582:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8002586:	2200      	movs	r2, #0
 8002588:	4b8b      	ldr	r3, [pc, #556]	; (80027b8 <_dtoa_r+0x328>)
 800258a:	4650      	mov	r0, sl
 800258c:	4659      	mov	r1, fp
 800258e:	f7fd fe4f 	bl	8000230 <__aeabi_dsub>
 8002592:	a381      	add	r3, pc, #516	; (adr r3, 8002798 <_dtoa_r+0x308>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	f7fe f802 	bl	80005a0 <__aeabi_dmul>
 800259c:	a380      	add	r3, pc, #512	; (adr r3, 80027a0 <_dtoa_r+0x310>)
 800259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a2:	f7fd fe47 	bl	8000234 <__adddf3>
 80025a6:	4606      	mov	r6, r0
 80025a8:	4628      	mov	r0, r5
 80025aa:	460f      	mov	r7, r1
 80025ac:	f7fd ff8e 	bl	80004cc <__aeabi_i2d>
 80025b0:	a37d      	add	r3, pc, #500	; (adr r3, 80027a8 <_dtoa_r+0x318>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fd fff3 	bl	80005a0 <__aeabi_dmul>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4630      	mov	r0, r6
 80025c0:	4639      	mov	r1, r7
 80025c2:	f7fd fe37 	bl	8000234 <__adddf3>
 80025c6:	4606      	mov	r6, r0
 80025c8:	460f      	mov	r7, r1
 80025ca:	f7fe fa99 	bl	8000b00 <__aeabi_d2iz>
 80025ce:	2200      	movs	r2, #0
 80025d0:	4682      	mov	sl, r0
 80025d2:	2300      	movs	r3, #0
 80025d4:	4630      	mov	r0, r6
 80025d6:	4639      	mov	r1, r7
 80025d8:	f7fe fa54 	bl	8000a84 <__aeabi_dcmplt>
 80025dc:	b148      	cbz	r0, 80025f2 <_dtoa_r+0x162>
 80025de:	4650      	mov	r0, sl
 80025e0:	f7fd ff74 	bl	80004cc <__aeabi_i2d>
 80025e4:	4632      	mov	r2, r6
 80025e6:	463b      	mov	r3, r7
 80025e8:	f7fe fa42 	bl	8000a70 <__aeabi_dcmpeq>
 80025ec:	b908      	cbnz	r0, 80025f2 <_dtoa_r+0x162>
 80025ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80025f2:	f1ba 0f16 	cmp.w	sl, #22
 80025f6:	d859      	bhi.n	80026ac <_dtoa_r+0x21c>
 80025f8:	4970      	ldr	r1, [pc, #448]	; (80027bc <_dtoa_r+0x32c>)
 80025fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80025fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002606:	f7fe fa5b 	bl	8000ac0 <__aeabi_dcmpgt>
 800260a:	2800      	cmp	r0, #0
 800260c:	d050      	beq.n	80026b0 <_dtoa_r+0x220>
 800260e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002612:	2300      	movs	r3, #0
 8002614:	930f      	str	r3, [sp, #60]	; 0x3c
 8002616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002618:	1b5d      	subs	r5, r3, r5
 800261a:	f1b5 0801 	subs.w	r8, r5, #1
 800261e:	bf49      	itett	mi
 8002620:	f1c5 0301 	rsbmi	r3, r5, #1
 8002624:	2300      	movpl	r3, #0
 8002626:	9305      	strmi	r3, [sp, #20]
 8002628:	f04f 0800 	movmi.w	r8, #0
 800262c:	bf58      	it	pl
 800262e:	9305      	strpl	r3, [sp, #20]
 8002630:	f1ba 0f00 	cmp.w	sl, #0
 8002634:	db3e      	blt.n	80026b4 <_dtoa_r+0x224>
 8002636:	2300      	movs	r3, #0
 8002638:	44d0      	add	r8, sl
 800263a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800263e:	9307      	str	r3, [sp, #28]
 8002640:	9b06      	ldr	r3, [sp, #24]
 8002642:	2b09      	cmp	r3, #9
 8002644:	f200 8090 	bhi.w	8002768 <_dtoa_r+0x2d8>
 8002648:	2b05      	cmp	r3, #5
 800264a:	bfc4      	itt	gt
 800264c:	3b04      	subgt	r3, #4
 800264e:	9306      	strgt	r3, [sp, #24]
 8002650:	9b06      	ldr	r3, [sp, #24]
 8002652:	f1a3 0302 	sub.w	r3, r3, #2
 8002656:	bfcc      	ite	gt
 8002658:	2500      	movgt	r5, #0
 800265a:	2501      	movle	r5, #1
 800265c:	2b03      	cmp	r3, #3
 800265e:	f200 808f 	bhi.w	8002780 <_dtoa_r+0x2f0>
 8002662:	e8df f003 	tbb	[pc, r3]
 8002666:	7f7d      	.short	0x7f7d
 8002668:	7131      	.short	0x7131
 800266a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800266e:	441d      	add	r5, r3
 8002670:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002674:	2820      	cmp	r0, #32
 8002676:	dd13      	ble.n	80026a0 <_dtoa_r+0x210>
 8002678:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800267c:	9b00      	ldr	r3, [sp, #0]
 800267e:	fa08 f800 	lsl.w	r8, r8, r0
 8002682:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002686:	fa23 f000 	lsr.w	r0, r3, r0
 800268a:	ea48 0000 	orr.w	r0, r8, r0
 800268e:	f7fd ff0d 	bl	80004ac <__aeabi_ui2d>
 8002692:	2301      	movs	r3, #1
 8002694:	4682      	mov	sl, r0
 8002696:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800269a:	3d01      	subs	r5, #1
 800269c:	9313      	str	r3, [sp, #76]	; 0x4c
 800269e:	e772      	b.n	8002586 <_dtoa_r+0xf6>
 80026a0:	9b00      	ldr	r3, [sp, #0]
 80026a2:	f1c0 0020 	rsb	r0, r0, #32
 80026a6:	fa03 f000 	lsl.w	r0, r3, r0
 80026aa:	e7f0      	b.n	800268e <_dtoa_r+0x1fe>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e7b1      	b.n	8002614 <_dtoa_r+0x184>
 80026b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80026b2:	e7b0      	b.n	8002616 <_dtoa_r+0x186>
 80026b4:	9b05      	ldr	r3, [sp, #20]
 80026b6:	eba3 030a 	sub.w	r3, r3, sl
 80026ba:	9305      	str	r3, [sp, #20]
 80026bc:	f1ca 0300 	rsb	r3, sl, #0
 80026c0:	9307      	str	r3, [sp, #28]
 80026c2:	2300      	movs	r3, #0
 80026c4:	930e      	str	r3, [sp, #56]	; 0x38
 80026c6:	e7bb      	b.n	8002640 <_dtoa_r+0x1b0>
 80026c8:	2301      	movs	r3, #1
 80026ca:	930a      	str	r3, [sp, #40]	; 0x28
 80026cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	dd59      	ble.n	8002786 <_dtoa_r+0x2f6>
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	4699      	mov	r9, r3
 80026d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80026d8:	2200      	movs	r2, #0
 80026da:	6072      	str	r2, [r6, #4]
 80026dc:	2204      	movs	r2, #4
 80026de:	f102 0014 	add.w	r0, r2, #20
 80026e2:	4298      	cmp	r0, r3
 80026e4:	6871      	ldr	r1, [r6, #4]
 80026e6:	d953      	bls.n	8002790 <_dtoa_r+0x300>
 80026e8:	4620      	mov	r0, r4
 80026ea:	f000 fcaa 	bl	8003042 <_Balloc>
 80026ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026f0:	6030      	str	r0, [r6, #0]
 80026f2:	f1b9 0f0e 	cmp.w	r9, #14
 80026f6:	f8d3 b000 	ldr.w	fp, [r3]
 80026fa:	f200 80e6 	bhi.w	80028ca <_dtoa_r+0x43a>
 80026fe:	2d00      	cmp	r5, #0
 8002700:	f000 80e3 	beq.w	80028ca <_dtoa_r+0x43a>
 8002704:	ed9d 7b00 	vldr	d7, [sp]
 8002708:	f1ba 0f00 	cmp.w	sl, #0
 800270c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002710:	dd74      	ble.n	80027fc <_dtoa_r+0x36c>
 8002712:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <_dtoa_r+0x32c>)
 8002714:	f00a 030f 	and.w	r3, sl, #15
 8002718:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800271c:	ed93 7b00 	vldr	d7, [r3]
 8002720:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002724:	06f0      	lsls	r0, r6, #27
 8002726:	ed8d 7b08 	vstr	d7, [sp, #32]
 800272a:	d565      	bpl.n	80027f8 <_dtoa_r+0x368>
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <_dtoa_r+0x330>)
 800272e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002732:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002736:	f7fe f85d 	bl	80007f4 <__aeabi_ddiv>
 800273a:	e9cd 0100 	strd	r0, r1, [sp]
 800273e:	f006 060f 	and.w	r6, r6, #15
 8002742:	2503      	movs	r5, #3
 8002744:	4f1e      	ldr	r7, [pc, #120]	; (80027c0 <_dtoa_r+0x330>)
 8002746:	e04c      	b.n	80027e2 <_dtoa_r+0x352>
 8002748:	2301      	movs	r3, #1
 800274a:	930a      	str	r3, [sp, #40]	; 0x28
 800274c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800274e:	4453      	add	r3, sl
 8002750:	f103 0901 	add.w	r9, r3, #1
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	464b      	mov	r3, r9
 8002758:	2b01      	cmp	r3, #1
 800275a:	bfb8      	it	lt
 800275c:	2301      	movlt	r3, #1
 800275e:	e7ba      	b.n	80026d6 <_dtoa_r+0x246>
 8002760:	2300      	movs	r3, #0
 8002762:	e7b2      	b.n	80026ca <_dtoa_r+0x23a>
 8002764:	2300      	movs	r3, #0
 8002766:	e7f0      	b.n	800274a <_dtoa_r+0x2ba>
 8002768:	2501      	movs	r5, #1
 800276a:	2300      	movs	r3, #0
 800276c:	9306      	str	r3, [sp, #24]
 800276e:	950a      	str	r5, [sp, #40]	; 0x28
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	4699      	mov	r9, r3
 8002778:	2200      	movs	r2, #0
 800277a:	2312      	movs	r3, #18
 800277c:	920b      	str	r2, [sp, #44]	; 0x2c
 800277e:	e7aa      	b.n	80026d6 <_dtoa_r+0x246>
 8002780:	2301      	movs	r3, #1
 8002782:	930a      	str	r3, [sp, #40]	; 0x28
 8002784:	e7f4      	b.n	8002770 <_dtoa_r+0x2e0>
 8002786:	2301      	movs	r3, #1
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	4699      	mov	r9, r3
 800278c:	461a      	mov	r2, r3
 800278e:	e7f5      	b.n	800277c <_dtoa_r+0x2ec>
 8002790:	3101      	adds	r1, #1
 8002792:	6071      	str	r1, [r6, #4]
 8002794:	0052      	lsls	r2, r2, #1
 8002796:	e7a2      	b.n	80026de <_dtoa_r+0x24e>
 8002798:	636f4361 	.word	0x636f4361
 800279c:	3fd287a7 	.word	0x3fd287a7
 80027a0:	8b60c8b3 	.word	0x8b60c8b3
 80027a4:	3fc68a28 	.word	0x3fc68a28
 80027a8:	509f79fb 	.word	0x509f79fb
 80027ac:	3fd34413 	.word	0x3fd34413
 80027b0:	7ff00000 	.word	0x7ff00000
 80027b4:	0802fb31 	.word	0x0802fb31
 80027b8:	3ff80000 	.word	0x3ff80000
 80027bc:	0802fb68 	.word	0x0802fb68
 80027c0:	0802fb40 	.word	0x0802fb40
 80027c4:	0802fb3b 	.word	0x0802fb3b
 80027c8:	07f1      	lsls	r1, r6, #31
 80027ca:	d508      	bpl.n	80027de <_dtoa_r+0x34e>
 80027cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80027d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d4:	f7fd fee4 	bl	80005a0 <__aeabi_dmul>
 80027d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80027dc:	3501      	adds	r5, #1
 80027de:	1076      	asrs	r6, r6, #1
 80027e0:	3708      	adds	r7, #8
 80027e2:	2e00      	cmp	r6, #0
 80027e4:	d1f0      	bne.n	80027c8 <_dtoa_r+0x338>
 80027e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80027ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80027ee:	f7fe f801 	bl	80007f4 <__aeabi_ddiv>
 80027f2:	e9cd 0100 	strd	r0, r1, [sp]
 80027f6:	e01a      	b.n	800282e <_dtoa_r+0x39e>
 80027f8:	2502      	movs	r5, #2
 80027fa:	e7a3      	b.n	8002744 <_dtoa_r+0x2b4>
 80027fc:	f000 80a0 	beq.w	8002940 <_dtoa_r+0x4b0>
 8002800:	f1ca 0600 	rsb	r6, sl, #0
 8002804:	4b9f      	ldr	r3, [pc, #636]	; (8002a84 <_dtoa_r+0x5f4>)
 8002806:	4fa0      	ldr	r7, [pc, #640]	; (8002a88 <_dtoa_r+0x5f8>)
 8002808:	f006 020f 	and.w	r2, r6, #15
 800280c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002818:	f7fd fec2 	bl	80005a0 <__aeabi_dmul>
 800281c:	e9cd 0100 	strd	r0, r1, [sp]
 8002820:	1136      	asrs	r6, r6, #4
 8002822:	2300      	movs	r3, #0
 8002824:	2502      	movs	r5, #2
 8002826:	2e00      	cmp	r6, #0
 8002828:	d17f      	bne.n	800292a <_dtoa_r+0x49a>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1e1      	bne.n	80027f2 <_dtoa_r+0x362>
 800282e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8087 	beq.w	8002944 <_dtoa_r+0x4b4>
 8002836:	e9dd 6700 	ldrd	r6, r7, [sp]
 800283a:	2200      	movs	r2, #0
 800283c:	4b93      	ldr	r3, [pc, #588]	; (8002a8c <_dtoa_r+0x5fc>)
 800283e:	4630      	mov	r0, r6
 8002840:	4639      	mov	r1, r7
 8002842:	f7fe f91f 	bl	8000a84 <__aeabi_dcmplt>
 8002846:	2800      	cmp	r0, #0
 8002848:	d07c      	beq.n	8002944 <_dtoa_r+0x4b4>
 800284a:	f1b9 0f00 	cmp.w	r9, #0
 800284e:	d079      	beq.n	8002944 <_dtoa_r+0x4b4>
 8002850:	9b02      	ldr	r3, [sp, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	dd35      	ble.n	80028c2 <_dtoa_r+0x432>
 8002856:	f10a 33ff 	add.w	r3, sl, #4294967295
 800285a:	9308      	str	r3, [sp, #32]
 800285c:	4639      	mov	r1, r7
 800285e:	2200      	movs	r2, #0
 8002860:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <_dtoa_r+0x600>)
 8002862:	4630      	mov	r0, r6
 8002864:	f7fd fe9c 	bl	80005a0 <__aeabi_dmul>
 8002868:	e9cd 0100 	strd	r0, r1, [sp]
 800286c:	9f02      	ldr	r7, [sp, #8]
 800286e:	3501      	adds	r5, #1
 8002870:	4628      	mov	r0, r5
 8002872:	f7fd fe2b 	bl	80004cc <__aeabi_i2d>
 8002876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800287a:	f7fd fe91 	bl	80005a0 <__aeabi_dmul>
 800287e:	2200      	movs	r2, #0
 8002880:	4b84      	ldr	r3, [pc, #528]	; (8002a94 <_dtoa_r+0x604>)
 8002882:	f7fd fcd7 	bl	8000234 <__adddf3>
 8002886:	4605      	mov	r5, r0
 8002888:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800288c:	2f00      	cmp	r7, #0
 800288e:	d15d      	bne.n	800294c <_dtoa_r+0x4bc>
 8002890:	2200      	movs	r2, #0
 8002892:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <_dtoa_r+0x608>)
 8002894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002898:	f7fd fcca 	bl	8000230 <__aeabi_dsub>
 800289c:	462a      	mov	r2, r5
 800289e:	4633      	mov	r3, r6
 80028a0:	e9cd 0100 	strd	r0, r1, [sp]
 80028a4:	f7fe f90c 	bl	8000ac0 <__aeabi_dcmpgt>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	f040 8288 	bne.w	8002dbe <_dtoa_r+0x92e>
 80028ae:	462a      	mov	r2, r5
 80028b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80028b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80028b8:	f7fe f8e4 	bl	8000a84 <__aeabi_dcmplt>
 80028bc:	2800      	cmp	r0, #0
 80028be:	f040 827c 	bne.w	8002dba <_dtoa_r+0x92a>
 80028c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80028c6:	e9cd 2300 	strd	r2, r3, [sp]
 80028ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f2c0 8150 	blt.w	8002b72 <_dtoa_r+0x6e2>
 80028d2:	f1ba 0f0e 	cmp.w	sl, #14
 80028d6:	f300 814c 	bgt.w	8002b72 <_dtoa_r+0x6e2>
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <_dtoa_r+0x5f4>)
 80028dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80028e0:	ed93 7b00 	vldr	d7, [r3]
 80028e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80028ec:	f280 80d8 	bge.w	8002aa0 <_dtoa_r+0x610>
 80028f0:	f1b9 0f00 	cmp.w	r9, #0
 80028f4:	f300 80d4 	bgt.w	8002aa0 <_dtoa_r+0x610>
 80028f8:	f040 825e 	bne.w	8002db8 <_dtoa_r+0x928>
 80028fc:	2200      	movs	r2, #0
 80028fe:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <_dtoa_r+0x608>)
 8002900:	ec51 0b17 	vmov	r0, r1, d7
 8002904:	f7fd fe4c 	bl	80005a0 <__aeabi_dmul>
 8002908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800290c:	f7fe f8ce 	bl	8000aac <__aeabi_dcmpge>
 8002910:	464f      	mov	r7, r9
 8002912:	464e      	mov	r6, r9
 8002914:	2800      	cmp	r0, #0
 8002916:	f040 8234 	bne.w	8002d82 <_dtoa_r+0x8f2>
 800291a:	2331      	movs	r3, #49	; 0x31
 800291c:	f10b 0501 	add.w	r5, fp, #1
 8002920:	f88b 3000 	strb.w	r3, [fp]
 8002924:	f10a 0a01 	add.w	sl, sl, #1
 8002928:	e22f      	b.n	8002d8a <_dtoa_r+0x8fa>
 800292a:	07f2      	lsls	r2, r6, #31
 800292c:	d505      	bpl.n	800293a <_dtoa_r+0x4aa>
 800292e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002932:	f7fd fe35 	bl	80005a0 <__aeabi_dmul>
 8002936:	3501      	adds	r5, #1
 8002938:	2301      	movs	r3, #1
 800293a:	1076      	asrs	r6, r6, #1
 800293c:	3708      	adds	r7, #8
 800293e:	e772      	b.n	8002826 <_dtoa_r+0x396>
 8002940:	2502      	movs	r5, #2
 8002942:	e774      	b.n	800282e <_dtoa_r+0x39e>
 8002944:	f8cd a020 	str.w	sl, [sp, #32]
 8002948:	464f      	mov	r7, r9
 800294a:	e791      	b.n	8002870 <_dtoa_r+0x3e0>
 800294c:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <_dtoa_r+0x5f4>)
 800294e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002952:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	d047      	beq.n	80029ec <_dtoa_r+0x55c>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	2000      	movs	r0, #0
 8002962:	494e      	ldr	r1, [pc, #312]	; (8002a9c <_dtoa_r+0x60c>)
 8002964:	f7fd ff46 	bl	80007f4 <__aeabi_ddiv>
 8002968:	462a      	mov	r2, r5
 800296a:	4633      	mov	r3, r6
 800296c:	f7fd fc60 	bl	8000230 <__aeabi_dsub>
 8002970:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002974:	465d      	mov	r5, fp
 8002976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800297a:	f7fe f8c1 	bl	8000b00 <__aeabi_d2iz>
 800297e:	4606      	mov	r6, r0
 8002980:	f7fd fda4 	bl	80004cc <__aeabi_i2d>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	e9dd 0100 	ldrd	r0, r1, [sp]
 800298c:	f7fd fc50 	bl	8000230 <__aeabi_dsub>
 8002990:	3630      	adds	r6, #48	; 0x30
 8002992:	f805 6b01 	strb.w	r6, [r5], #1
 8002996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800299a:	e9cd 0100 	strd	r0, r1, [sp]
 800299e:	f7fe f871 	bl	8000a84 <__aeabi_dcmplt>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d163      	bne.n	8002a6e <_dtoa_r+0x5de>
 80029a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80029aa:	2000      	movs	r0, #0
 80029ac:	4937      	ldr	r1, [pc, #220]	; (8002a8c <_dtoa_r+0x5fc>)
 80029ae:	f7fd fc3f 	bl	8000230 <__aeabi_dsub>
 80029b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80029b6:	f7fe f865 	bl	8000a84 <__aeabi_dcmplt>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	f040 80b7 	bne.w	8002b2e <_dtoa_r+0x69e>
 80029c0:	eba5 030b 	sub.w	r3, r5, fp
 80029c4:	429f      	cmp	r7, r3
 80029c6:	f77f af7c 	ble.w	80028c2 <_dtoa_r+0x432>
 80029ca:	2200      	movs	r2, #0
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <_dtoa_r+0x600>)
 80029ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80029d2:	f7fd fde5 	bl	80005a0 <__aeabi_dmul>
 80029d6:	2200      	movs	r2, #0
 80029d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <_dtoa_r+0x600>)
 80029de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80029e2:	f7fd fddd 	bl	80005a0 <__aeabi_dmul>
 80029e6:	e9cd 0100 	strd	r0, r1, [sp]
 80029ea:	e7c4      	b.n	8002976 <_dtoa_r+0x4e6>
 80029ec:	462a      	mov	r2, r5
 80029ee:	4633      	mov	r3, r6
 80029f0:	f7fd fdd6 	bl	80005a0 <__aeabi_dmul>
 80029f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80029f8:	eb0b 0507 	add.w	r5, fp, r7
 80029fc:	465e      	mov	r6, fp
 80029fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a02:	f7fe f87d 	bl	8000b00 <__aeabi_d2iz>
 8002a06:	4607      	mov	r7, r0
 8002a08:	f7fd fd60 	bl	80004cc <__aeabi_i2d>
 8002a0c:	3730      	adds	r7, #48	; 0x30
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a16:	f7fd fc0b 	bl	8000230 <__aeabi_dsub>
 8002a1a:	f806 7b01 	strb.w	r7, [r6], #1
 8002a1e:	42ae      	cmp	r6, r5
 8002a20:	e9cd 0100 	strd	r0, r1, [sp]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	d126      	bne.n	8002a78 <_dtoa_r+0x5e8>
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <_dtoa_r+0x60c>)
 8002a2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002a30:	f7fd fc00 	bl	8000234 <__adddf3>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a3c:	f7fe f840 	bl	8000ac0 <__aeabi_dcmpgt>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d174      	bne.n	8002b2e <_dtoa_r+0x69e>
 8002a44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002a48:	2000      	movs	r0, #0
 8002a4a:	4914      	ldr	r1, [pc, #80]	; (8002a9c <_dtoa_r+0x60c>)
 8002a4c:	f7fd fbf0 	bl	8000230 <__aeabi_dsub>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a58:	f7fe f814 	bl	8000a84 <__aeabi_dcmplt>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	f43f af30 	beq.w	80028c2 <_dtoa_r+0x432>
 8002a62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002a66:	2b30      	cmp	r3, #48	; 0x30
 8002a68:	f105 32ff 	add.w	r2, r5, #4294967295
 8002a6c:	d002      	beq.n	8002a74 <_dtoa_r+0x5e4>
 8002a6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002a72:	e04a      	b.n	8002b0a <_dtoa_r+0x67a>
 8002a74:	4615      	mov	r5, r2
 8002a76:	e7f4      	b.n	8002a62 <_dtoa_r+0x5d2>
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <_dtoa_r+0x600>)
 8002a7a:	f7fd fd91 	bl	80005a0 <__aeabi_dmul>
 8002a7e:	e9cd 0100 	strd	r0, r1, [sp]
 8002a82:	e7bc      	b.n	80029fe <_dtoa_r+0x56e>
 8002a84:	0802fb68 	.word	0x0802fb68
 8002a88:	0802fb40 	.word	0x0802fb40
 8002a8c:	3ff00000 	.word	0x3ff00000
 8002a90:	40240000 	.word	0x40240000
 8002a94:	401c0000 	.word	0x401c0000
 8002a98:	40140000 	.word	0x40140000
 8002a9c:	3fe00000 	.word	0x3fe00000
 8002aa0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002aa4:	465d      	mov	r5, fp
 8002aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002aaa:	4630      	mov	r0, r6
 8002aac:	4639      	mov	r1, r7
 8002aae:	f7fd fea1 	bl	80007f4 <__aeabi_ddiv>
 8002ab2:	f7fe f825 	bl	8000b00 <__aeabi_d2iz>
 8002ab6:	4680      	mov	r8, r0
 8002ab8:	f7fd fd08 	bl	80004cc <__aeabi_i2d>
 8002abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ac0:	f7fd fd6e 	bl	80005a0 <__aeabi_dmul>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4630      	mov	r0, r6
 8002aca:	4639      	mov	r1, r7
 8002acc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8002ad0:	f7fd fbae 	bl	8000230 <__aeabi_dsub>
 8002ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8002ad8:	eba5 060b 	sub.w	r6, r5, fp
 8002adc:	45b1      	cmp	r9, r6
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	d139      	bne.n	8002b58 <_dtoa_r+0x6c8>
 8002ae4:	f7fd fba6 	bl	8000234 <__adddf3>
 8002ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002aec:	4606      	mov	r6, r0
 8002aee:	460f      	mov	r7, r1
 8002af0:	f7fd ffe6 	bl	8000ac0 <__aeabi_dcmpgt>
 8002af4:	b9c8      	cbnz	r0, 8002b2a <_dtoa_r+0x69a>
 8002af6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002afa:	4630      	mov	r0, r6
 8002afc:	4639      	mov	r1, r7
 8002afe:	f7fd ffb7 	bl	8000a70 <__aeabi_dcmpeq>
 8002b02:	b110      	cbz	r0, 8002b0a <_dtoa_r+0x67a>
 8002b04:	f018 0f01 	tst.w	r8, #1
 8002b08:	d10f      	bne.n	8002b2a <_dtoa_r+0x69a>
 8002b0a:	9904      	ldr	r1, [sp, #16]
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f000 facc 	bl	80030aa <_Bfree>
 8002b12:	2300      	movs	r3, #0
 8002b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b16:	702b      	strb	r3, [r5, #0]
 8002b18:	f10a 0301 	add.w	r3, sl, #1
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8241 	beq.w	8002fa8 <_dtoa_r+0xb18>
 8002b26:	601d      	str	r5, [r3, #0]
 8002b28:	e23e      	b.n	8002fa8 <_dtoa_r+0xb18>
 8002b2a:	f8cd a020 	str.w	sl, [sp, #32]
 8002b2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002b32:	2a39      	cmp	r2, #57	; 0x39
 8002b34:	f105 33ff 	add.w	r3, r5, #4294967295
 8002b38:	d108      	bne.n	8002b4c <_dtoa_r+0x6bc>
 8002b3a:	459b      	cmp	fp, r3
 8002b3c:	d10a      	bne.n	8002b54 <_dtoa_r+0x6c4>
 8002b3e:	9b08      	ldr	r3, [sp, #32]
 8002b40:	3301      	adds	r3, #1
 8002b42:	9308      	str	r3, [sp, #32]
 8002b44:	2330      	movs	r3, #48	; 0x30
 8002b46:	f88b 3000 	strb.w	r3, [fp]
 8002b4a:	465b      	mov	r3, fp
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	3201      	adds	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e78c      	b.n	8002a6e <_dtoa_r+0x5de>
 8002b54:	461d      	mov	r5, r3
 8002b56:	e7ea      	b.n	8002b2e <_dtoa_r+0x69e>
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4b9b      	ldr	r3, [pc, #620]	; (8002dc8 <_dtoa_r+0x938>)
 8002b5c:	f7fd fd20 	bl	80005a0 <__aeabi_dmul>
 8002b60:	2200      	movs	r2, #0
 8002b62:	2300      	movs	r3, #0
 8002b64:	4606      	mov	r6, r0
 8002b66:	460f      	mov	r7, r1
 8002b68:	f7fd ff82 	bl	8000a70 <__aeabi_dcmpeq>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d09a      	beq.n	8002aa6 <_dtoa_r+0x616>
 8002b70:	e7cb      	b.n	8002b0a <_dtoa_r+0x67a>
 8002b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	f000 808b 	beq.w	8002c90 <_dtoa_r+0x800>
 8002b7a:	9a06      	ldr	r2, [sp, #24]
 8002b7c:	2a01      	cmp	r2, #1
 8002b7e:	dc6e      	bgt.n	8002c5e <_dtoa_r+0x7ce>
 8002b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002b82:	2a00      	cmp	r2, #0
 8002b84:	d067      	beq.n	8002c56 <_dtoa_r+0x7c6>
 8002b86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002b8a:	9f07      	ldr	r7, [sp, #28]
 8002b8c:	9d05      	ldr	r5, [sp, #20]
 8002b8e:	9a05      	ldr	r2, [sp, #20]
 8002b90:	2101      	movs	r1, #1
 8002b92:	441a      	add	r2, r3
 8002b94:	4620      	mov	r0, r4
 8002b96:	9205      	str	r2, [sp, #20]
 8002b98:	4498      	add	r8, r3
 8002b9a:	f000 fb26 	bl	80031ea <__i2b>
 8002b9e:	4606      	mov	r6, r0
 8002ba0:	2d00      	cmp	r5, #0
 8002ba2:	dd0c      	ble.n	8002bbe <_dtoa_r+0x72e>
 8002ba4:	f1b8 0f00 	cmp.w	r8, #0
 8002ba8:	dd09      	ble.n	8002bbe <_dtoa_r+0x72e>
 8002baa:	4545      	cmp	r5, r8
 8002bac:	9a05      	ldr	r2, [sp, #20]
 8002bae:	462b      	mov	r3, r5
 8002bb0:	bfa8      	it	ge
 8002bb2:	4643      	movge	r3, r8
 8002bb4:	1ad2      	subs	r2, r2, r3
 8002bb6:	9205      	str	r2, [sp, #20]
 8002bb8:	1aed      	subs	r5, r5, r3
 8002bba:	eba8 0803 	sub.w	r8, r8, r3
 8002bbe:	9b07      	ldr	r3, [sp, #28]
 8002bc0:	b1eb      	cbz	r3, 8002bfe <_dtoa_r+0x76e>
 8002bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d067      	beq.n	8002c98 <_dtoa_r+0x808>
 8002bc8:	b18f      	cbz	r7, 8002bee <_dtoa_r+0x75e>
 8002bca:	4631      	mov	r1, r6
 8002bcc:	463a      	mov	r2, r7
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f000 fbaa 	bl	8003328 <__pow5mult>
 8002bd4:	9a04      	ldr	r2, [sp, #16]
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	4606      	mov	r6, r0
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f000 fb0e 	bl	80031fc <__multiply>
 8002be0:	9904      	ldr	r1, [sp, #16]
 8002be2:	9008      	str	r0, [sp, #32]
 8002be4:	4620      	mov	r0, r4
 8002be6:	f000 fa60 	bl	80030aa <_Bfree>
 8002bea:	9b08      	ldr	r3, [sp, #32]
 8002bec:	9304      	str	r3, [sp, #16]
 8002bee:	9b07      	ldr	r3, [sp, #28]
 8002bf0:	1bda      	subs	r2, r3, r7
 8002bf2:	d004      	beq.n	8002bfe <_dtoa_r+0x76e>
 8002bf4:	9904      	ldr	r1, [sp, #16]
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f000 fb96 	bl	8003328 <__pow5mult>
 8002bfc:	9004      	str	r0, [sp, #16]
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4620      	mov	r0, r4
 8002c02:	f000 faf2 	bl	80031ea <__i2b>
 8002c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c08:	4607      	mov	r7, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 81d0 	beq.w	8002fb0 <_dtoa_r+0xb20>
 8002c10:	461a      	mov	r2, r3
 8002c12:	4601      	mov	r1, r0
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 fb87 	bl	8003328 <__pow5mult>
 8002c1a:	9b06      	ldr	r3, [sp, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	4607      	mov	r7, r0
 8002c20:	dc40      	bgt.n	8002ca4 <_dtoa_r+0x814>
 8002c22:	9b00      	ldr	r3, [sp, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d139      	bne.n	8002c9c <_dtoa_r+0x80c>
 8002c28:	9b01      	ldr	r3, [sp, #4]
 8002c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d136      	bne.n	8002ca0 <_dtoa_r+0x810>
 8002c32:	9b01      	ldr	r3, [sp, #4]
 8002c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c38:	0d1b      	lsrs	r3, r3, #20
 8002c3a:	051b      	lsls	r3, r3, #20
 8002c3c:	b12b      	cbz	r3, 8002c4a <_dtoa_r+0x7ba>
 8002c3e:	9b05      	ldr	r3, [sp, #20]
 8002c40:	3301      	adds	r3, #1
 8002c42:	9305      	str	r3, [sp, #20]
 8002c44:	f108 0801 	add.w	r8, r8, #1
 8002c48:	2301      	movs	r3, #1
 8002c4a:	9307      	str	r3, [sp, #28]
 8002c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d12a      	bne.n	8002ca8 <_dtoa_r+0x818>
 8002c52:	2001      	movs	r0, #1
 8002c54:	e030      	b.n	8002cb8 <_dtoa_r+0x828>
 8002c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002c58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002c5c:	e795      	b.n	8002b8a <_dtoa_r+0x6fa>
 8002c5e:	9b07      	ldr	r3, [sp, #28]
 8002c60:	f109 37ff 	add.w	r7, r9, #4294967295
 8002c64:	42bb      	cmp	r3, r7
 8002c66:	bfbf      	itttt	lt
 8002c68:	9b07      	ldrlt	r3, [sp, #28]
 8002c6a:	9707      	strlt	r7, [sp, #28]
 8002c6c:	1afa      	sublt	r2, r7, r3
 8002c6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8002c70:	bfbb      	ittet	lt
 8002c72:	189b      	addlt	r3, r3, r2
 8002c74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8002c76:	1bdf      	subge	r7, r3, r7
 8002c78:	2700      	movlt	r7, #0
 8002c7a:	f1b9 0f00 	cmp.w	r9, #0
 8002c7e:	bfb5      	itete	lt
 8002c80:	9b05      	ldrlt	r3, [sp, #20]
 8002c82:	9d05      	ldrge	r5, [sp, #20]
 8002c84:	eba3 0509 	sublt.w	r5, r3, r9
 8002c88:	464b      	movge	r3, r9
 8002c8a:	bfb8      	it	lt
 8002c8c:	2300      	movlt	r3, #0
 8002c8e:	e77e      	b.n	8002b8e <_dtoa_r+0x6fe>
 8002c90:	9f07      	ldr	r7, [sp, #28]
 8002c92:	9d05      	ldr	r5, [sp, #20]
 8002c94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002c96:	e783      	b.n	8002ba0 <_dtoa_r+0x710>
 8002c98:	9a07      	ldr	r2, [sp, #28]
 8002c9a:	e7ab      	b.n	8002bf4 <_dtoa_r+0x764>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e7d4      	b.n	8002c4a <_dtoa_r+0x7ba>
 8002ca0:	9b00      	ldr	r3, [sp, #0]
 8002ca2:	e7d2      	b.n	8002c4a <_dtoa_r+0x7ba>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9307      	str	r3, [sp, #28]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002cae:	6918      	ldr	r0, [r3, #16]
 8002cb0:	f000 fa4d 	bl	800314e <__hi0bits>
 8002cb4:	f1c0 0020 	rsb	r0, r0, #32
 8002cb8:	4440      	add	r0, r8
 8002cba:	f010 001f 	ands.w	r0, r0, #31
 8002cbe:	d047      	beq.n	8002d50 <_dtoa_r+0x8c0>
 8002cc0:	f1c0 0320 	rsb	r3, r0, #32
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	dd3b      	ble.n	8002d40 <_dtoa_r+0x8b0>
 8002cc8:	9b05      	ldr	r3, [sp, #20]
 8002cca:	f1c0 001c 	rsb	r0, r0, #28
 8002cce:	4403      	add	r3, r0
 8002cd0:	9305      	str	r3, [sp, #20]
 8002cd2:	4405      	add	r5, r0
 8002cd4:	4480      	add	r8, r0
 8002cd6:	9b05      	ldr	r3, [sp, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dd05      	ble.n	8002ce8 <_dtoa_r+0x858>
 8002cdc:	461a      	mov	r2, r3
 8002cde:	9904      	ldr	r1, [sp, #16]
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f000 fb6f 	bl	80033c4 <__lshift>
 8002ce6:	9004      	str	r0, [sp, #16]
 8002ce8:	f1b8 0f00 	cmp.w	r8, #0
 8002cec:	dd05      	ble.n	8002cfa <_dtoa_r+0x86a>
 8002cee:	4639      	mov	r1, r7
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f000 fb66 	bl	80033c4 <__lshift>
 8002cf8:	4607      	mov	r7, r0
 8002cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002cfc:	b353      	cbz	r3, 8002d54 <_dtoa_r+0x8c4>
 8002cfe:	4639      	mov	r1, r7
 8002d00:	9804      	ldr	r0, [sp, #16]
 8002d02:	f000 fbb3 	bl	800346c <__mcmp>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	da24      	bge.n	8002d54 <_dtoa_r+0x8c4>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	220a      	movs	r2, #10
 8002d0e:	9904      	ldr	r1, [sp, #16]
 8002d10:	4620      	mov	r0, r4
 8002d12:	f000 f9e1 	bl	80030d8 <__multadd>
 8002d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d18:	9004      	str	r0, [sp, #16]
 8002d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 814d 	beq.w	8002fbe <_dtoa_r+0xb2e>
 8002d24:	2300      	movs	r3, #0
 8002d26:	4631      	mov	r1, r6
 8002d28:	220a      	movs	r2, #10
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f000 f9d4 	bl	80030d8 <__multadd>
 8002d30:	9b02      	ldr	r3, [sp, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	4606      	mov	r6, r0
 8002d36:	dc4f      	bgt.n	8002dd8 <_dtoa_r+0x948>
 8002d38:	9b06      	ldr	r3, [sp, #24]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	dd4c      	ble.n	8002dd8 <_dtoa_r+0x948>
 8002d3e:	e011      	b.n	8002d64 <_dtoa_r+0x8d4>
 8002d40:	d0c9      	beq.n	8002cd6 <_dtoa_r+0x846>
 8002d42:	9a05      	ldr	r2, [sp, #20]
 8002d44:	331c      	adds	r3, #28
 8002d46:	441a      	add	r2, r3
 8002d48:	9205      	str	r2, [sp, #20]
 8002d4a:	441d      	add	r5, r3
 8002d4c:	4498      	add	r8, r3
 8002d4e:	e7c2      	b.n	8002cd6 <_dtoa_r+0x846>
 8002d50:	4603      	mov	r3, r0
 8002d52:	e7f6      	b.n	8002d42 <_dtoa_r+0x8b2>
 8002d54:	f1b9 0f00 	cmp.w	r9, #0
 8002d58:	dc38      	bgt.n	8002dcc <_dtoa_r+0x93c>
 8002d5a:	9b06      	ldr	r3, [sp, #24]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	dd35      	ble.n	8002dcc <_dtoa_r+0x93c>
 8002d60:	f8cd 9008 	str.w	r9, [sp, #8]
 8002d64:	9b02      	ldr	r3, [sp, #8]
 8002d66:	b963      	cbnz	r3, 8002d82 <_dtoa_r+0x8f2>
 8002d68:	4639      	mov	r1, r7
 8002d6a:	2205      	movs	r2, #5
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f000 f9b3 	bl	80030d8 <__multadd>
 8002d72:	4601      	mov	r1, r0
 8002d74:	4607      	mov	r7, r0
 8002d76:	9804      	ldr	r0, [sp, #16]
 8002d78:	f000 fb78 	bl	800346c <__mcmp>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	f73f adcc 	bgt.w	800291a <_dtoa_r+0x48a>
 8002d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d84:	465d      	mov	r5, fp
 8002d86:	ea6f 0a03 	mvn.w	sl, r3
 8002d8a:	f04f 0900 	mov.w	r9, #0
 8002d8e:	4639      	mov	r1, r7
 8002d90:	4620      	mov	r0, r4
 8002d92:	f000 f98a 	bl	80030aa <_Bfree>
 8002d96:	2e00      	cmp	r6, #0
 8002d98:	f43f aeb7 	beq.w	8002b0a <_dtoa_r+0x67a>
 8002d9c:	f1b9 0f00 	cmp.w	r9, #0
 8002da0:	d005      	beq.n	8002dae <_dtoa_r+0x91e>
 8002da2:	45b1      	cmp	r9, r6
 8002da4:	d003      	beq.n	8002dae <_dtoa_r+0x91e>
 8002da6:	4649      	mov	r1, r9
 8002da8:	4620      	mov	r0, r4
 8002daa:	f000 f97e 	bl	80030aa <_Bfree>
 8002dae:	4631      	mov	r1, r6
 8002db0:	4620      	mov	r0, r4
 8002db2:	f000 f97a 	bl	80030aa <_Bfree>
 8002db6:	e6a8      	b.n	8002b0a <_dtoa_r+0x67a>
 8002db8:	2700      	movs	r7, #0
 8002dba:	463e      	mov	r6, r7
 8002dbc:	e7e1      	b.n	8002d82 <_dtoa_r+0x8f2>
 8002dbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002dc2:	463e      	mov	r6, r7
 8002dc4:	e5a9      	b.n	800291a <_dtoa_r+0x48a>
 8002dc6:	bf00      	nop
 8002dc8:	40240000 	.word	0x40240000
 8002dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dce:	f8cd 9008 	str.w	r9, [sp, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80fa 	beq.w	8002fcc <_dtoa_r+0xb3c>
 8002dd8:	2d00      	cmp	r5, #0
 8002dda:	dd05      	ble.n	8002de8 <_dtoa_r+0x958>
 8002ddc:	4631      	mov	r1, r6
 8002dde:	462a      	mov	r2, r5
 8002de0:	4620      	mov	r0, r4
 8002de2:	f000 faef 	bl	80033c4 <__lshift>
 8002de6:	4606      	mov	r6, r0
 8002de8:	9b07      	ldr	r3, [sp, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d04c      	beq.n	8002e88 <_dtoa_r+0x9f8>
 8002dee:	6871      	ldr	r1, [r6, #4]
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 f926 	bl	8003042 <_Balloc>
 8002df6:	6932      	ldr	r2, [r6, #16]
 8002df8:	3202      	adds	r2, #2
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	f106 010c 	add.w	r1, r6, #12
 8002e02:	300c      	adds	r0, #12
 8002e04:	f000 f912 	bl	800302c <memcpy>
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f000 fad9 	bl	80033c4 <__lshift>
 8002e12:	9b00      	ldr	r3, [sp, #0]
 8002e14:	f8cd b014 	str.w	fp, [sp, #20]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	46b1      	mov	r9, r6
 8002e1e:	9307      	str	r3, [sp, #28]
 8002e20:	4606      	mov	r6, r0
 8002e22:	4639      	mov	r1, r7
 8002e24:	9804      	ldr	r0, [sp, #16]
 8002e26:	f7ff faa4 	bl	8002372 <quorem>
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	4605      	mov	r5, r0
 8002e2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002e32:	9804      	ldr	r0, [sp, #16]
 8002e34:	f000 fb1a 	bl	800346c <__mcmp>
 8002e38:	4632      	mov	r2, r6
 8002e3a:	9000      	str	r0, [sp, #0]
 8002e3c:	4639      	mov	r1, r7
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f000 fb2e 	bl	80034a0 <__mdiff>
 8002e44:	68c3      	ldr	r3, [r0, #12]
 8002e46:	4602      	mov	r2, r0
 8002e48:	bb03      	cbnz	r3, 8002e8c <_dtoa_r+0x9fc>
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	9008      	str	r0, [sp, #32]
 8002e4e:	9804      	ldr	r0, [sp, #16]
 8002e50:	f000 fb0c 	bl	800346c <__mcmp>
 8002e54:	9a08      	ldr	r2, [sp, #32]
 8002e56:	4603      	mov	r3, r0
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	9308      	str	r3, [sp, #32]
 8002e5e:	f000 f924 	bl	80030aa <_Bfree>
 8002e62:	9b08      	ldr	r3, [sp, #32]
 8002e64:	b9a3      	cbnz	r3, 8002e90 <_dtoa_r+0xa00>
 8002e66:	9a06      	ldr	r2, [sp, #24]
 8002e68:	b992      	cbnz	r2, 8002e90 <_dtoa_r+0xa00>
 8002e6a:	9a07      	ldr	r2, [sp, #28]
 8002e6c:	b982      	cbnz	r2, 8002e90 <_dtoa_r+0xa00>
 8002e6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002e72:	d029      	beq.n	8002ec8 <_dtoa_r+0xa38>
 8002e74:	9b00      	ldr	r3, [sp, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	dd01      	ble.n	8002e7e <_dtoa_r+0x9ee>
 8002e7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8002e7e:	9b05      	ldr	r3, [sp, #20]
 8002e80:	1c5d      	adds	r5, r3, #1
 8002e82:	f883 8000 	strb.w	r8, [r3]
 8002e86:	e782      	b.n	8002d8e <_dtoa_r+0x8fe>
 8002e88:	4630      	mov	r0, r6
 8002e8a:	e7c2      	b.n	8002e12 <_dtoa_r+0x982>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e7e3      	b.n	8002e58 <_dtoa_r+0x9c8>
 8002e90:	9a00      	ldr	r2, [sp, #0]
 8002e92:	2a00      	cmp	r2, #0
 8002e94:	db04      	blt.n	8002ea0 <_dtoa_r+0xa10>
 8002e96:	d125      	bne.n	8002ee4 <_dtoa_r+0xa54>
 8002e98:	9a06      	ldr	r2, [sp, #24]
 8002e9a:	bb1a      	cbnz	r2, 8002ee4 <_dtoa_r+0xa54>
 8002e9c:	9a07      	ldr	r2, [sp, #28]
 8002e9e:	bb0a      	cbnz	r2, 8002ee4 <_dtoa_r+0xa54>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	ddec      	ble.n	8002e7e <_dtoa_r+0x9ee>
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	9904      	ldr	r1, [sp, #16]
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f000 fa8b 	bl	80033c4 <__lshift>
 8002eae:	4639      	mov	r1, r7
 8002eb0:	9004      	str	r0, [sp, #16]
 8002eb2:	f000 fadb 	bl	800346c <__mcmp>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	dc03      	bgt.n	8002ec2 <_dtoa_r+0xa32>
 8002eba:	d1e0      	bne.n	8002e7e <_dtoa_r+0x9ee>
 8002ebc:	f018 0f01 	tst.w	r8, #1
 8002ec0:	d0dd      	beq.n	8002e7e <_dtoa_r+0x9ee>
 8002ec2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002ec6:	d1d8      	bne.n	8002e7a <_dtoa_r+0x9ea>
 8002ec8:	9b05      	ldr	r3, [sp, #20]
 8002eca:	9a05      	ldr	r2, [sp, #20]
 8002ecc:	1c5d      	adds	r5, r3, #1
 8002ece:	2339      	movs	r3, #57	; 0x39
 8002ed0:	7013      	strb	r3, [r2, #0]
 8002ed2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002ed6:	2b39      	cmp	r3, #57	; 0x39
 8002ed8:	f105 32ff 	add.w	r2, r5, #4294967295
 8002edc:	d04f      	beq.n	8002f7e <_dtoa_r+0xaee>
 8002ede:	3301      	adds	r3, #1
 8002ee0:	7013      	strb	r3, [r2, #0]
 8002ee2:	e754      	b.n	8002d8e <_dtoa_r+0x8fe>
 8002ee4:	9a05      	ldr	r2, [sp, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f102 0501 	add.w	r5, r2, #1
 8002eec:	dd06      	ble.n	8002efc <_dtoa_r+0xa6c>
 8002eee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002ef2:	d0e9      	beq.n	8002ec8 <_dtoa_r+0xa38>
 8002ef4:	f108 0801 	add.w	r8, r8, #1
 8002ef8:	9b05      	ldr	r3, [sp, #20]
 8002efa:	e7c2      	b.n	8002e82 <_dtoa_r+0x9f2>
 8002efc:	9a02      	ldr	r2, [sp, #8]
 8002efe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8002f02:	eba5 030b 	sub.w	r3, r5, fp
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d021      	beq.n	8002f4e <_dtoa_r+0xabe>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	9904      	ldr	r1, [sp, #16]
 8002f10:	4620      	mov	r0, r4
 8002f12:	f000 f8e1 	bl	80030d8 <__multadd>
 8002f16:	45b1      	cmp	r9, r6
 8002f18:	9004      	str	r0, [sp, #16]
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f04f 020a 	mov.w	r2, #10
 8002f22:	4649      	mov	r1, r9
 8002f24:	4620      	mov	r0, r4
 8002f26:	d105      	bne.n	8002f34 <_dtoa_r+0xaa4>
 8002f28:	f000 f8d6 	bl	80030d8 <__multadd>
 8002f2c:	4681      	mov	r9, r0
 8002f2e:	4606      	mov	r6, r0
 8002f30:	9505      	str	r5, [sp, #20]
 8002f32:	e776      	b.n	8002e22 <_dtoa_r+0x992>
 8002f34:	f000 f8d0 	bl	80030d8 <__multadd>
 8002f38:	4631      	mov	r1, r6
 8002f3a:	4681      	mov	r9, r0
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	220a      	movs	r2, #10
 8002f40:	4620      	mov	r0, r4
 8002f42:	f000 f8c9 	bl	80030d8 <__multadd>
 8002f46:	4606      	mov	r6, r0
 8002f48:	e7f2      	b.n	8002f30 <_dtoa_r+0xaa0>
 8002f4a:	f04f 0900 	mov.w	r9, #0
 8002f4e:	2201      	movs	r2, #1
 8002f50:	9904      	ldr	r1, [sp, #16]
 8002f52:	4620      	mov	r0, r4
 8002f54:	f000 fa36 	bl	80033c4 <__lshift>
 8002f58:	4639      	mov	r1, r7
 8002f5a:	9004      	str	r0, [sp, #16]
 8002f5c:	f000 fa86 	bl	800346c <__mcmp>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	dcb6      	bgt.n	8002ed2 <_dtoa_r+0xa42>
 8002f64:	d102      	bne.n	8002f6c <_dtoa_r+0xadc>
 8002f66:	f018 0f01 	tst.w	r8, #1
 8002f6a:	d1b2      	bne.n	8002ed2 <_dtoa_r+0xa42>
 8002f6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002f70:	2b30      	cmp	r3, #48	; 0x30
 8002f72:	f105 32ff 	add.w	r2, r5, #4294967295
 8002f76:	f47f af0a 	bne.w	8002d8e <_dtoa_r+0x8fe>
 8002f7a:	4615      	mov	r5, r2
 8002f7c:	e7f6      	b.n	8002f6c <_dtoa_r+0xadc>
 8002f7e:	4593      	cmp	fp, r2
 8002f80:	d105      	bne.n	8002f8e <_dtoa_r+0xafe>
 8002f82:	2331      	movs	r3, #49	; 0x31
 8002f84:	f10a 0a01 	add.w	sl, sl, #1
 8002f88:	f88b 3000 	strb.w	r3, [fp]
 8002f8c:	e6ff      	b.n	8002d8e <_dtoa_r+0x8fe>
 8002f8e:	4615      	mov	r5, r2
 8002f90:	e79f      	b.n	8002ed2 <_dtoa_r+0xa42>
 8002f92:	f8df b064 	ldr.w	fp, [pc, #100]	; 8002ff8 <_dtoa_r+0xb68>
 8002f96:	e007      	b.n	8002fa8 <_dtoa_r+0xb18>
 8002f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f9a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8002ffc <_dtoa_r+0xb6c>
 8002f9e:	b11b      	cbz	r3, 8002fa8 <_dtoa_r+0xb18>
 8002fa0:	f10b 0308 	add.w	r3, fp, #8
 8002fa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4658      	mov	r0, fp
 8002faa:	b017      	add	sp, #92	; 0x5c
 8002fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb0:	9b06      	ldr	r3, [sp, #24]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	f77f ae35 	ble.w	8002c22 <_dtoa_r+0x792>
 8002fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fba:	9307      	str	r3, [sp, #28]
 8002fbc:	e649      	b.n	8002c52 <_dtoa_r+0x7c2>
 8002fbe:	9b02      	ldr	r3, [sp, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dc03      	bgt.n	8002fcc <_dtoa_r+0xb3c>
 8002fc4:	9b06      	ldr	r3, [sp, #24]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	f73f aecc 	bgt.w	8002d64 <_dtoa_r+0x8d4>
 8002fcc:	465d      	mov	r5, fp
 8002fce:	4639      	mov	r1, r7
 8002fd0:	9804      	ldr	r0, [sp, #16]
 8002fd2:	f7ff f9ce 	bl	8002372 <quorem>
 8002fd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002fda:	f805 8b01 	strb.w	r8, [r5], #1
 8002fde:	9a02      	ldr	r2, [sp, #8]
 8002fe0:	eba5 030b 	sub.w	r3, r5, fp
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	ddb0      	ble.n	8002f4a <_dtoa_r+0xaba>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	220a      	movs	r2, #10
 8002fec:	9904      	ldr	r1, [sp, #16]
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f000 f872 	bl	80030d8 <__multadd>
 8002ff4:	9004      	str	r0, [sp, #16]
 8002ff6:	e7ea      	b.n	8002fce <_dtoa_r+0xb3e>
 8002ff8:	0802fb30 	.word	0x0802fb30
 8002ffc:	0802fb32 	.word	0x0802fb32

08003000 <_localeconv_r>:
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <_localeconv_r+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6a18      	ldr	r0, [r3, #32]
 8003006:	4b04      	ldr	r3, [pc, #16]	; (8003018 <_localeconv_r+0x18>)
 8003008:	2800      	cmp	r0, #0
 800300a:	bf08      	it	eq
 800300c:	4618      	moveq	r0, r3
 800300e:	30f0      	adds	r0, #240	; 0xf0
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000000c 	.word	0x2000000c
 8003018:	20000070 	.word	0x20000070

0800301c <malloc>:
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <malloc+0xc>)
 800301e:	4601      	mov	r1, r0
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	f000 baf7 	b.w	8003614 <_malloc_r>
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c

0800302c <memcpy>:
 800302c:	b510      	push	{r4, lr}
 800302e:	1e43      	subs	r3, r0, #1
 8003030:	440a      	add	r2, r1
 8003032:	4291      	cmp	r1, r2
 8003034:	d100      	bne.n	8003038 <memcpy+0xc>
 8003036:	bd10      	pop	{r4, pc}
 8003038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800303c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003040:	e7f7      	b.n	8003032 <memcpy+0x6>

08003042 <_Balloc>:
 8003042:	b570      	push	{r4, r5, r6, lr}
 8003044:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003046:	4604      	mov	r4, r0
 8003048:	460e      	mov	r6, r1
 800304a:	b93d      	cbnz	r5, 800305c <_Balloc+0x1a>
 800304c:	2010      	movs	r0, #16
 800304e:	f7ff ffe5 	bl	800301c <malloc>
 8003052:	6260      	str	r0, [r4, #36]	; 0x24
 8003054:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003058:	6005      	str	r5, [r0, #0]
 800305a:	60c5      	str	r5, [r0, #12]
 800305c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800305e:	68eb      	ldr	r3, [r5, #12]
 8003060:	b183      	cbz	r3, 8003084 <_Balloc+0x42>
 8003062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800306a:	b9b8      	cbnz	r0, 800309c <_Balloc+0x5a>
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f506 	lsl.w	r5, r1, r6
 8003072:	1d6a      	adds	r2, r5, #5
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	4620      	mov	r0, r4
 8003078:	f000 fabe 	bl	80035f8 <_calloc_r>
 800307c:	b160      	cbz	r0, 8003098 <_Balloc+0x56>
 800307e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003082:	e00e      	b.n	80030a2 <_Balloc+0x60>
 8003084:	2221      	movs	r2, #33	; 0x21
 8003086:	2104      	movs	r1, #4
 8003088:	4620      	mov	r0, r4
 800308a:	f000 fab5 	bl	80035f8 <_calloc_r>
 800308e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003090:	60e8      	str	r0, [r5, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e4      	bne.n	8003062 <_Balloc+0x20>
 8003098:	2000      	movs	r0, #0
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	6802      	ldr	r2, [r0, #0]
 800309e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80030a2:	2300      	movs	r3, #0
 80030a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80030a8:	e7f7      	b.n	800309a <_Balloc+0x58>

080030aa <_Bfree>:
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80030ae:	4606      	mov	r6, r0
 80030b0:	460d      	mov	r5, r1
 80030b2:	b93c      	cbnz	r4, 80030c4 <_Bfree+0x1a>
 80030b4:	2010      	movs	r0, #16
 80030b6:	f7ff ffb1 	bl	800301c <malloc>
 80030ba:	6270      	str	r0, [r6, #36]	; 0x24
 80030bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80030c0:	6004      	str	r4, [r0, #0]
 80030c2:	60c4      	str	r4, [r0, #12]
 80030c4:	b13d      	cbz	r5, 80030d6 <_Bfree+0x2c>
 80030c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80030c8:	686a      	ldr	r2, [r5, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030d0:	6029      	str	r1, [r5, #0]
 80030d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80030d6:	bd70      	pop	{r4, r5, r6, pc}

080030d8 <__multadd>:
 80030d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030dc:	690d      	ldr	r5, [r1, #16]
 80030de:	461f      	mov	r7, r3
 80030e0:	4606      	mov	r6, r0
 80030e2:	460c      	mov	r4, r1
 80030e4:	f101 0c14 	add.w	ip, r1, #20
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8dc 0000 	ldr.w	r0, [ip]
 80030ee:	b281      	uxth	r1, r0
 80030f0:	fb02 7101 	mla	r1, r2, r1, r7
 80030f4:	0c0f      	lsrs	r7, r1, #16
 80030f6:	0c00      	lsrs	r0, r0, #16
 80030f8:	fb02 7000 	mla	r0, r2, r0, r7
 80030fc:	b289      	uxth	r1, r1
 80030fe:	3301      	adds	r3, #1
 8003100:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003104:	429d      	cmp	r5, r3
 8003106:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800310a:	f84c 1b04 	str.w	r1, [ip], #4
 800310e:	dcec      	bgt.n	80030ea <__multadd+0x12>
 8003110:	b1d7      	cbz	r7, 8003148 <__multadd+0x70>
 8003112:	68a3      	ldr	r3, [r4, #8]
 8003114:	42ab      	cmp	r3, r5
 8003116:	dc12      	bgt.n	800313e <__multadd+0x66>
 8003118:	6861      	ldr	r1, [r4, #4]
 800311a:	4630      	mov	r0, r6
 800311c:	3101      	adds	r1, #1
 800311e:	f7ff ff90 	bl	8003042 <_Balloc>
 8003122:	6922      	ldr	r2, [r4, #16]
 8003124:	3202      	adds	r2, #2
 8003126:	f104 010c 	add.w	r1, r4, #12
 800312a:	4680      	mov	r8, r0
 800312c:	0092      	lsls	r2, r2, #2
 800312e:	300c      	adds	r0, #12
 8003130:	f7ff ff7c 	bl	800302c <memcpy>
 8003134:	4621      	mov	r1, r4
 8003136:	4630      	mov	r0, r6
 8003138:	f7ff ffb7 	bl	80030aa <_Bfree>
 800313c:	4644      	mov	r4, r8
 800313e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003142:	3501      	adds	r5, #1
 8003144:	615f      	str	r7, [r3, #20]
 8003146:	6125      	str	r5, [r4, #16]
 8003148:	4620      	mov	r0, r4
 800314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800314e <__hi0bits>:
 800314e:	0c02      	lsrs	r2, r0, #16
 8003150:	0412      	lsls	r2, r2, #16
 8003152:	4603      	mov	r3, r0
 8003154:	b9b2      	cbnz	r2, 8003184 <__hi0bits+0x36>
 8003156:	0403      	lsls	r3, r0, #16
 8003158:	2010      	movs	r0, #16
 800315a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800315e:	bf04      	itt	eq
 8003160:	021b      	lsleq	r3, r3, #8
 8003162:	3008      	addeq	r0, #8
 8003164:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003168:	bf04      	itt	eq
 800316a:	011b      	lsleq	r3, r3, #4
 800316c:	3004      	addeq	r0, #4
 800316e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003172:	bf04      	itt	eq
 8003174:	009b      	lsleq	r3, r3, #2
 8003176:	3002      	addeq	r0, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	db06      	blt.n	800318a <__hi0bits+0x3c>
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	d503      	bpl.n	8003188 <__hi0bits+0x3a>
 8003180:	3001      	adds	r0, #1
 8003182:	4770      	bx	lr
 8003184:	2000      	movs	r0, #0
 8003186:	e7e8      	b.n	800315a <__hi0bits+0xc>
 8003188:	2020      	movs	r0, #32
 800318a:	4770      	bx	lr

0800318c <__lo0bits>:
 800318c:	6803      	ldr	r3, [r0, #0]
 800318e:	f013 0207 	ands.w	r2, r3, #7
 8003192:	4601      	mov	r1, r0
 8003194:	d00b      	beq.n	80031ae <__lo0bits+0x22>
 8003196:	07da      	lsls	r2, r3, #31
 8003198:	d423      	bmi.n	80031e2 <__lo0bits+0x56>
 800319a:	0798      	lsls	r0, r3, #30
 800319c:	bf49      	itett	mi
 800319e:	085b      	lsrmi	r3, r3, #1
 80031a0:	089b      	lsrpl	r3, r3, #2
 80031a2:	2001      	movmi	r0, #1
 80031a4:	600b      	strmi	r3, [r1, #0]
 80031a6:	bf5c      	itt	pl
 80031a8:	600b      	strpl	r3, [r1, #0]
 80031aa:	2002      	movpl	r0, #2
 80031ac:	4770      	bx	lr
 80031ae:	b298      	uxth	r0, r3
 80031b0:	b9a8      	cbnz	r0, 80031de <__lo0bits+0x52>
 80031b2:	0c1b      	lsrs	r3, r3, #16
 80031b4:	2010      	movs	r0, #16
 80031b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80031ba:	bf04      	itt	eq
 80031bc:	0a1b      	lsreq	r3, r3, #8
 80031be:	3008      	addeq	r0, #8
 80031c0:	071a      	lsls	r2, r3, #28
 80031c2:	bf04      	itt	eq
 80031c4:	091b      	lsreq	r3, r3, #4
 80031c6:	3004      	addeq	r0, #4
 80031c8:	079a      	lsls	r2, r3, #30
 80031ca:	bf04      	itt	eq
 80031cc:	089b      	lsreq	r3, r3, #2
 80031ce:	3002      	addeq	r0, #2
 80031d0:	07da      	lsls	r2, r3, #31
 80031d2:	d402      	bmi.n	80031da <__lo0bits+0x4e>
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	d006      	beq.n	80031e6 <__lo0bits+0x5a>
 80031d8:	3001      	adds	r0, #1
 80031da:	600b      	str	r3, [r1, #0]
 80031dc:	4770      	bx	lr
 80031de:	4610      	mov	r0, r2
 80031e0:	e7e9      	b.n	80031b6 <__lo0bits+0x2a>
 80031e2:	2000      	movs	r0, #0
 80031e4:	4770      	bx	lr
 80031e6:	2020      	movs	r0, #32
 80031e8:	4770      	bx	lr

080031ea <__i2b>:
 80031ea:	b510      	push	{r4, lr}
 80031ec:	460c      	mov	r4, r1
 80031ee:	2101      	movs	r1, #1
 80031f0:	f7ff ff27 	bl	8003042 <_Balloc>
 80031f4:	2201      	movs	r2, #1
 80031f6:	6144      	str	r4, [r0, #20]
 80031f8:	6102      	str	r2, [r0, #16]
 80031fa:	bd10      	pop	{r4, pc}

080031fc <__multiply>:
 80031fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003200:	4614      	mov	r4, r2
 8003202:	690a      	ldr	r2, [r1, #16]
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	bfb8      	it	lt
 800320a:	460b      	movlt	r3, r1
 800320c:	4688      	mov	r8, r1
 800320e:	bfbc      	itt	lt
 8003210:	46a0      	movlt	r8, r4
 8003212:	461c      	movlt	r4, r3
 8003214:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003218:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800321c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003220:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003224:	eb07 0609 	add.w	r6, r7, r9
 8003228:	42b3      	cmp	r3, r6
 800322a:	bfb8      	it	lt
 800322c:	3101      	addlt	r1, #1
 800322e:	f7ff ff08 	bl	8003042 <_Balloc>
 8003232:	f100 0514 	add.w	r5, r0, #20
 8003236:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800323a:	462b      	mov	r3, r5
 800323c:	2200      	movs	r2, #0
 800323e:	4573      	cmp	r3, lr
 8003240:	d316      	bcc.n	8003270 <__multiply+0x74>
 8003242:	f104 0214 	add.w	r2, r4, #20
 8003246:	f108 0114 	add.w	r1, r8, #20
 800324a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800324e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	9b00      	ldr	r3, [sp, #0]
 8003256:	9201      	str	r2, [sp, #4]
 8003258:	4293      	cmp	r3, r2
 800325a:	d80c      	bhi.n	8003276 <__multiply+0x7a>
 800325c:	2e00      	cmp	r6, #0
 800325e:	dd03      	ble.n	8003268 <__multiply+0x6c>
 8003260:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003264:	2b00      	cmp	r3, #0
 8003266:	d05d      	beq.n	8003324 <__multiply+0x128>
 8003268:	6106      	str	r6, [r0, #16]
 800326a:	b003      	add	sp, #12
 800326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003270:	f843 2b04 	str.w	r2, [r3], #4
 8003274:	e7e3      	b.n	800323e <__multiply+0x42>
 8003276:	f8b2 b000 	ldrh.w	fp, [r2]
 800327a:	f1bb 0f00 	cmp.w	fp, #0
 800327e:	d023      	beq.n	80032c8 <__multiply+0xcc>
 8003280:	4689      	mov	r9, r1
 8003282:	46ac      	mov	ip, r5
 8003284:	f04f 0800 	mov.w	r8, #0
 8003288:	f859 4b04 	ldr.w	r4, [r9], #4
 800328c:	f8dc a000 	ldr.w	sl, [ip]
 8003290:	b2a3      	uxth	r3, r4
 8003292:	fa1f fa8a 	uxth.w	sl, sl
 8003296:	fb0b a303 	mla	r3, fp, r3, sl
 800329a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800329e:	f8dc 4000 	ldr.w	r4, [ip]
 80032a2:	4443      	add	r3, r8
 80032a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80032a8:	fb0b 840a 	mla	r4, fp, sl, r8
 80032ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80032b0:	46e2      	mov	sl, ip
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80032b8:	454f      	cmp	r7, r9
 80032ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80032be:	f84a 3b04 	str.w	r3, [sl], #4
 80032c2:	d82b      	bhi.n	800331c <__multiply+0x120>
 80032c4:	f8cc 8004 	str.w	r8, [ip, #4]
 80032c8:	9b01      	ldr	r3, [sp, #4]
 80032ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80032ce:	3204      	adds	r2, #4
 80032d0:	f1ba 0f00 	cmp.w	sl, #0
 80032d4:	d020      	beq.n	8003318 <__multiply+0x11c>
 80032d6:	682b      	ldr	r3, [r5, #0]
 80032d8:	4689      	mov	r9, r1
 80032da:	46a8      	mov	r8, r5
 80032dc:	f04f 0b00 	mov.w	fp, #0
 80032e0:	f8b9 c000 	ldrh.w	ip, [r9]
 80032e4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80032e8:	fb0a 440c 	mla	r4, sl, ip, r4
 80032ec:	445c      	add	r4, fp
 80032ee:	46c4      	mov	ip, r8
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80032f6:	f84c 3b04 	str.w	r3, [ip], #4
 80032fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80032fe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	fb0a b303 	mla	r3, sl, r3, fp
 8003308:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800330c:	454f      	cmp	r7, r9
 800330e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003312:	d805      	bhi.n	8003320 <__multiply+0x124>
 8003314:	f8c8 3004 	str.w	r3, [r8, #4]
 8003318:	3504      	adds	r5, #4
 800331a:	e79b      	b.n	8003254 <__multiply+0x58>
 800331c:	46d4      	mov	ip, sl
 800331e:	e7b3      	b.n	8003288 <__multiply+0x8c>
 8003320:	46e0      	mov	r8, ip
 8003322:	e7dd      	b.n	80032e0 <__multiply+0xe4>
 8003324:	3e01      	subs	r6, #1
 8003326:	e799      	b.n	800325c <__multiply+0x60>

08003328 <__pow5mult>:
 8003328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800332c:	4615      	mov	r5, r2
 800332e:	f012 0203 	ands.w	r2, r2, #3
 8003332:	4606      	mov	r6, r0
 8003334:	460f      	mov	r7, r1
 8003336:	d007      	beq.n	8003348 <__pow5mult+0x20>
 8003338:	3a01      	subs	r2, #1
 800333a:	4c21      	ldr	r4, [pc, #132]	; (80033c0 <__pow5mult+0x98>)
 800333c:	2300      	movs	r3, #0
 800333e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003342:	f7ff fec9 	bl	80030d8 <__multadd>
 8003346:	4607      	mov	r7, r0
 8003348:	10ad      	asrs	r5, r5, #2
 800334a:	d035      	beq.n	80033b8 <__pow5mult+0x90>
 800334c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800334e:	b93c      	cbnz	r4, 8003360 <__pow5mult+0x38>
 8003350:	2010      	movs	r0, #16
 8003352:	f7ff fe63 	bl	800301c <malloc>
 8003356:	6270      	str	r0, [r6, #36]	; 0x24
 8003358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800335c:	6004      	str	r4, [r0, #0]
 800335e:	60c4      	str	r4, [r0, #12]
 8003360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003368:	b94c      	cbnz	r4, 800337e <__pow5mult+0x56>
 800336a:	f240 2171 	movw	r1, #625	; 0x271
 800336e:	4630      	mov	r0, r6
 8003370:	f7ff ff3b 	bl	80031ea <__i2b>
 8003374:	2300      	movs	r3, #0
 8003376:	f8c8 0008 	str.w	r0, [r8, #8]
 800337a:	4604      	mov	r4, r0
 800337c:	6003      	str	r3, [r0, #0]
 800337e:	f04f 0800 	mov.w	r8, #0
 8003382:	07eb      	lsls	r3, r5, #31
 8003384:	d50a      	bpl.n	800339c <__pow5mult+0x74>
 8003386:	4639      	mov	r1, r7
 8003388:	4622      	mov	r2, r4
 800338a:	4630      	mov	r0, r6
 800338c:	f7ff ff36 	bl	80031fc <__multiply>
 8003390:	4639      	mov	r1, r7
 8003392:	4681      	mov	r9, r0
 8003394:	4630      	mov	r0, r6
 8003396:	f7ff fe88 	bl	80030aa <_Bfree>
 800339a:	464f      	mov	r7, r9
 800339c:	106d      	asrs	r5, r5, #1
 800339e:	d00b      	beq.n	80033b8 <__pow5mult+0x90>
 80033a0:	6820      	ldr	r0, [r4, #0]
 80033a2:	b938      	cbnz	r0, 80033b4 <__pow5mult+0x8c>
 80033a4:	4622      	mov	r2, r4
 80033a6:	4621      	mov	r1, r4
 80033a8:	4630      	mov	r0, r6
 80033aa:	f7ff ff27 	bl	80031fc <__multiply>
 80033ae:	6020      	str	r0, [r4, #0]
 80033b0:	f8c0 8000 	str.w	r8, [r0]
 80033b4:	4604      	mov	r4, r0
 80033b6:	e7e4      	b.n	8003382 <__pow5mult+0x5a>
 80033b8:	4638      	mov	r0, r7
 80033ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033be:	bf00      	nop
 80033c0:	0802fc30 	.word	0x0802fc30

080033c4 <__lshift>:
 80033c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c8:	460c      	mov	r4, r1
 80033ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	6849      	ldr	r1, [r1, #4]
 80033d2:	eb0a 0903 	add.w	r9, sl, r3
 80033d6:	68a3      	ldr	r3, [r4, #8]
 80033d8:	4607      	mov	r7, r0
 80033da:	4616      	mov	r6, r2
 80033dc:	f109 0501 	add.w	r5, r9, #1
 80033e0:	42ab      	cmp	r3, r5
 80033e2:	db32      	blt.n	800344a <__lshift+0x86>
 80033e4:	4638      	mov	r0, r7
 80033e6:	f7ff fe2c 	bl	8003042 <_Balloc>
 80033ea:	2300      	movs	r3, #0
 80033ec:	4680      	mov	r8, r0
 80033ee:	f100 0114 	add.w	r1, r0, #20
 80033f2:	461a      	mov	r2, r3
 80033f4:	4553      	cmp	r3, sl
 80033f6:	db2b      	blt.n	8003450 <__lshift+0x8c>
 80033f8:	6920      	ldr	r0, [r4, #16]
 80033fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80033fe:	f104 0314 	add.w	r3, r4, #20
 8003402:	f016 021f 	ands.w	r2, r6, #31
 8003406:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800340a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800340e:	d025      	beq.n	800345c <__lshift+0x98>
 8003410:	f1c2 0e20 	rsb	lr, r2, #32
 8003414:	2000      	movs	r0, #0
 8003416:	681e      	ldr	r6, [r3, #0]
 8003418:	468a      	mov	sl, r1
 800341a:	4096      	lsls	r6, r2
 800341c:	4330      	orrs	r0, r6
 800341e:	f84a 0b04 	str.w	r0, [sl], #4
 8003422:	f853 0b04 	ldr.w	r0, [r3], #4
 8003426:	459c      	cmp	ip, r3
 8003428:	fa20 f00e 	lsr.w	r0, r0, lr
 800342c:	d814      	bhi.n	8003458 <__lshift+0x94>
 800342e:	6048      	str	r0, [r1, #4]
 8003430:	b108      	cbz	r0, 8003436 <__lshift+0x72>
 8003432:	f109 0502 	add.w	r5, r9, #2
 8003436:	3d01      	subs	r5, #1
 8003438:	4638      	mov	r0, r7
 800343a:	f8c8 5010 	str.w	r5, [r8, #16]
 800343e:	4621      	mov	r1, r4
 8003440:	f7ff fe33 	bl	80030aa <_Bfree>
 8003444:	4640      	mov	r0, r8
 8003446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800344a:	3101      	adds	r1, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	e7c7      	b.n	80033e0 <__lshift+0x1c>
 8003450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003454:	3301      	adds	r3, #1
 8003456:	e7cd      	b.n	80033f4 <__lshift+0x30>
 8003458:	4651      	mov	r1, sl
 800345a:	e7dc      	b.n	8003416 <__lshift+0x52>
 800345c:	3904      	subs	r1, #4
 800345e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003462:	f841 2f04 	str.w	r2, [r1, #4]!
 8003466:	459c      	cmp	ip, r3
 8003468:	d8f9      	bhi.n	800345e <__lshift+0x9a>
 800346a:	e7e4      	b.n	8003436 <__lshift+0x72>

0800346c <__mcmp>:
 800346c:	6903      	ldr	r3, [r0, #16]
 800346e:	690a      	ldr	r2, [r1, #16]
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	b530      	push	{r4, r5, lr}
 8003474:	d10c      	bne.n	8003490 <__mcmp+0x24>
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	3014      	adds	r0, #20
 800347a:	3114      	adds	r1, #20
 800347c:	1884      	adds	r4, r0, r2
 800347e:	4411      	add	r1, r2
 8003480:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003484:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003488:	4295      	cmp	r5, r2
 800348a:	d003      	beq.n	8003494 <__mcmp+0x28>
 800348c:	d305      	bcc.n	800349a <__mcmp+0x2e>
 800348e:	2301      	movs	r3, #1
 8003490:	4618      	mov	r0, r3
 8003492:	bd30      	pop	{r4, r5, pc}
 8003494:	42a0      	cmp	r0, r4
 8003496:	d3f3      	bcc.n	8003480 <__mcmp+0x14>
 8003498:	e7fa      	b.n	8003490 <__mcmp+0x24>
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	e7f7      	b.n	8003490 <__mcmp+0x24>

080034a0 <__mdiff>:
 80034a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	460d      	mov	r5, r1
 80034a6:	4607      	mov	r7, r0
 80034a8:	4611      	mov	r1, r2
 80034aa:	4628      	mov	r0, r5
 80034ac:	4614      	mov	r4, r2
 80034ae:	f7ff ffdd 	bl	800346c <__mcmp>
 80034b2:	1e06      	subs	r6, r0, #0
 80034b4:	d108      	bne.n	80034c8 <__mdiff+0x28>
 80034b6:	4631      	mov	r1, r6
 80034b8:	4638      	mov	r0, r7
 80034ba:	f7ff fdc2 	bl	8003042 <_Balloc>
 80034be:	2301      	movs	r3, #1
 80034c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80034c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c8:	bfa4      	itt	ge
 80034ca:	4623      	movge	r3, r4
 80034cc:	462c      	movge	r4, r5
 80034ce:	4638      	mov	r0, r7
 80034d0:	6861      	ldr	r1, [r4, #4]
 80034d2:	bfa6      	itte	ge
 80034d4:	461d      	movge	r5, r3
 80034d6:	2600      	movge	r6, #0
 80034d8:	2601      	movlt	r6, #1
 80034da:	f7ff fdb2 	bl	8003042 <_Balloc>
 80034de:	692b      	ldr	r3, [r5, #16]
 80034e0:	60c6      	str	r6, [r0, #12]
 80034e2:	6926      	ldr	r6, [r4, #16]
 80034e4:	f105 0914 	add.w	r9, r5, #20
 80034e8:	f104 0214 	add.w	r2, r4, #20
 80034ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80034f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80034f4:	f100 0514 	add.w	r5, r0, #20
 80034f8:	f04f 0e00 	mov.w	lr, #0
 80034fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8003500:	f859 4b04 	ldr.w	r4, [r9], #4
 8003504:	fa1e f18a 	uxtah	r1, lr, sl
 8003508:	b2a3      	uxth	r3, r4
 800350a:	1ac9      	subs	r1, r1, r3
 800350c:	0c23      	lsrs	r3, r4, #16
 800350e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8003512:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003516:	b289      	uxth	r1, r1
 8003518:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800351c:	45c8      	cmp	r8, r9
 800351e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003522:	4694      	mov	ip, r2
 8003524:	f845 3b04 	str.w	r3, [r5], #4
 8003528:	d8e8      	bhi.n	80034fc <__mdiff+0x5c>
 800352a:	45bc      	cmp	ip, r7
 800352c:	d304      	bcc.n	8003538 <__mdiff+0x98>
 800352e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003532:	b183      	cbz	r3, 8003556 <__mdiff+0xb6>
 8003534:	6106      	str	r6, [r0, #16]
 8003536:	e7c5      	b.n	80034c4 <__mdiff+0x24>
 8003538:	f85c 1b04 	ldr.w	r1, [ip], #4
 800353c:	fa1e f381 	uxtah	r3, lr, r1
 8003540:	141a      	asrs	r2, r3, #16
 8003542:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003546:	b29b      	uxth	r3, r3
 8003548:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800354c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003550:	f845 3b04 	str.w	r3, [r5], #4
 8003554:	e7e9      	b.n	800352a <__mdiff+0x8a>
 8003556:	3e01      	subs	r6, #1
 8003558:	e7e9      	b.n	800352e <__mdiff+0x8e>

0800355a <__d2b>:
 800355a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800355e:	460e      	mov	r6, r1
 8003560:	2101      	movs	r1, #1
 8003562:	ec59 8b10 	vmov	r8, r9, d0
 8003566:	4615      	mov	r5, r2
 8003568:	f7ff fd6b 	bl	8003042 <_Balloc>
 800356c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003570:	4607      	mov	r7, r0
 8003572:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003576:	bb34      	cbnz	r4, 80035c6 <__d2b+0x6c>
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	f1b8 0300 	subs.w	r3, r8, #0
 800357e:	d027      	beq.n	80035d0 <__d2b+0x76>
 8003580:	a802      	add	r0, sp, #8
 8003582:	f840 3d08 	str.w	r3, [r0, #-8]!
 8003586:	f7ff fe01 	bl	800318c <__lo0bits>
 800358a:	9900      	ldr	r1, [sp, #0]
 800358c:	b1f0      	cbz	r0, 80035cc <__d2b+0x72>
 800358e:	9a01      	ldr	r2, [sp, #4]
 8003590:	f1c0 0320 	rsb	r3, r0, #32
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	430b      	orrs	r3, r1
 800359a:	40c2      	lsrs	r2, r0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	9201      	str	r2, [sp, #4]
 80035a0:	9b01      	ldr	r3, [sp, #4]
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2102      	movne	r1, #2
 80035aa:	2101      	moveq	r1, #1
 80035ac:	6139      	str	r1, [r7, #16]
 80035ae:	b1c4      	cbz	r4, 80035e2 <__d2b+0x88>
 80035b0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80035b4:	4404      	add	r4, r0
 80035b6:	6034      	str	r4, [r6, #0]
 80035b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80035bc:	6028      	str	r0, [r5, #0]
 80035be:	4638      	mov	r0, r7
 80035c0:	b003      	add	sp, #12
 80035c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	e7d5      	b.n	8003578 <__d2b+0x1e>
 80035cc:	6179      	str	r1, [r7, #20]
 80035ce:	e7e7      	b.n	80035a0 <__d2b+0x46>
 80035d0:	a801      	add	r0, sp, #4
 80035d2:	f7ff fddb 	bl	800318c <__lo0bits>
 80035d6:	9b01      	ldr	r3, [sp, #4]
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	2101      	movs	r1, #1
 80035dc:	6139      	str	r1, [r7, #16]
 80035de:	3020      	adds	r0, #32
 80035e0:	e7e5      	b.n	80035ae <__d2b+0x54>
 80035e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80035e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80035ea:	6030      	str	r0, [r6, #0]
 80035ec:	6918      	ldr	r0, [r3, #16]
 80035ee:	f7ff fdae 	bl	800314e <__hi0bits>
 80035f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80035f6:	e7e1      	b.n	80035bc <__d2b+0x62>

080035f8 <_calloc_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	fb02 f401 	mul.w	r4, r2, r1
 80035fe:	4621      	mov	r1, r4
 8003600:	f000 f808 	bl	8003614 <_malloc_r>
 8003604:	4605      	mov	r5, r0
 8003606:	b118      	cbz	r0, 8003610 <_calloc_r+0x18>
 8003608:	4622      	mov	r2, r4
 800360a:	2100      	movs	r1, #0
 800360c:	f7fe fb60 	bl	8001cd0 <memset>
 8003610:	4628      	mov	r0, r5
 8003612:	bd38      	pop	{r3, r4, r5, pc}

08003614 <_malloc_r>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	1ccd      	adds	r5, r1, #3
 8003618:	f025 0503 	bic.w	r5, r5, #3
 800361c:	3508      	adds	r5, #8
 800361e:	2d0c      	cmp	r5, #12
 8003620:	bf38      	it	cc
 8003622:	250c      	movcc	r5, #12
 8003624:	2d00      	cmp	r5, #0
 8003626:	4606      	mov	r6, r0
 8003628:	db01      	blt.n	800362e <_malloc_r+0x1a>
 800362a:	42a9      	cmp	r1, r5
 800362c:	d903      	bls.n	8003636 <_malloc_r+0x22>
 800362e:	230c      	movs	r3, #12
 8003630:	6033      	str	r3, [r6, #0]
 8003632:	2000      	movs	r0, #0
 8003634:	bd70      	pop	{r4, r5, r6, pc}
 8003636:	f000 f869 	bl	800370c <__malloc_lock>
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <_malloc_r+0xac>)
 800363c:	6814      	ldr	r4, [r2, #0]
 800363e:	4621      	mov	r1, r4
 8003640:	b991      	cbnz	r1, 8003668 <_malloc_r+0x54>
 8003642:	4c20      	ldr	r4, [pc, #128]	; (80036c4 <_malloc_r+0xb0>)
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	b91b      	cbnz	r3, 8003650 <_malloc_r+0x3c>
 8003648:	4630      	mov	r0, r6
 800364a:	f000 f83d 	bl	80036c8 <_sbrk_r>
 800364e:	6020      	str	r0, [r4, #0]
 8003650:	4629      	mov	r1, r5
 8003652:	4630      	mov	r0, r6
 8003654:	f000 f838 	bl	80036c8 <_sbrk_r>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d124      	bne.n	80036a6 <_malloc_r+0x92>
 800365c:	230c      	movs	r3, #12
 800365e:	6033      	str	r3, [r6, #0]
 8003660:	4630      	mov	r0, r6
 8003662:	f000 f854 	bl	800370e <__malloc_unlock>
 8003666:	e7e4      	b.n	8003632 <_malloc_r+0x1e>
 8003668:	680b      	ldr	r3, [r1, #0]
 800366a:	1b5b      	subs	r3, r3, r5
 800366c:	d418      	bmi.n	80036a0 <_malloc_r+0x8c>
 800366e:	2b0b      	cmp	r3, #11
 8003670:	d90f      	bls.n	8003692 <_malloc_r+0x7e>
 8003672:	600b      	str	r3, [r1, #0]
 8003674:	50cd      	str	r5, [r1, r3]
 8003676:	18cc      	adds	r4, r1, r3
 8003678:	4630      	mov	r0, r6
 800367a:	f000 f848 	bl	800370e <__malloc_unlock>
 800367e:	f104 000b 	add.w	r0, r4, #11
 8003682:	1d23      	adds	r3, r4, #4
 8003684:	f020 0007 	bic.w	r0, r0, #7
 8003688:	1ac3      	subs	r3, r0, r3
 800368a:	d0d3      	beq.n	8003634 <_malloc_r+0x20>
 800368c:	425a      	negs	r2, r3
 800368e:	50e2      	str	r2, [r4, r3]
 8003690:	e7d0      	b.n	8003634 <_malloc_r+0x20>
 8003692:	428c      	cmp	r4, r1
 8003694:	684b      	ldr	r3, [r1, #4]
 8003696:	bf16      	itet	ne
 8003698:	6063      	strne	r3, [r4, #4]
 800369a:	6013      	streq	r3, [r2, #0]
 800369c:	460c      	movne	r4, r1
 800369e:	e7eb      	b.n	8003678 <_malloc_r+0x64>
 80036a0:	460c      	mov	r4, r1
 80036a2:	6849      	ldr	r1, [r1, #4]
 80036a4:	e7cc      	b.n	8003640 <_malloc_r+0x2c>
 80036a6:	1cc4      	adds	r4, r0, #3
 80036a8:	f024 0403 	bic.w	r4, r4, #3
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d005      	beq.n	80036bc <_malloc_r+0xa8>
 80036b0:	1a21      	subs	r1, r4, r0
 80036b2:	4630      	mov	r0, r6
 80036b4:	f000 f808 	bl	80036c8 <_sbrk_r>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d0cf      	beq.n	800365c <_malloc_r+0x48>
 80036bc:	6025      	str	r5, [r4, #0]
 80036be:	e7db      	b.n	8003678 <_malloc_r+0x64>
 80036c0:	20000200 	.word	0x20000200
 80036c4:	20000204 	.word	0x20000204

080036c8 <_sbrk_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4c06      	ldr	r4, [pc, #24]	; (80036e4 <_sbrk_r+0x1c>)
 80036cc:	2300      	movs	r3, #0
 80036ce:	4605      	mov	r5, r0
 80036d0:	4608      	mov	r0, r1
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	f7fd fca2 	bl	800101c <_sbrk>
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	d102      	bne.n	80036e2 <_sbrk_r+0x1a>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	b103      	cbz	r3, 80036e2 <_sbrk_r+0x1a>
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	2000020c 	.word	0x2000020c

080036e8 <__ascii_mbtowc>:
 80036e8:	b082      	sub	sp, #8
 80036ea:	b901      	cbnz	r1, 80036ee <__ascii_mbtowc+0x6>
 80036ec:	a901      	add	r1, sp, #4
 80036ee:	b142      	cbz	r2, 8003702 <__ascii_mbtowc+0x1a>
 80036f0:	b14b      	cbz	r3, 8003706 <__ascii_mbtowc+0x1e>
 80036f2:	7813      	ldrb	r3, [r2, #0]
 80036f4:	600b      	str	r3, [r1, #0]
 80036f6:	7812      	ldrb	r2, [r2, #0]
 80036f8:	1c10      	adds	r0, r2, #0
 80036fa:	bf18      	it	ne
 80036fc:	2001      	movne	r0, #1
 80036fe:	b002      	add	sp, #8
 8003700:	4770      	bx	lr
 8003702:	4610      	mov	r0, r2
 8003704:	e7fb      	b.n	80036fe <__ascii_mbtowc+0x16>
 8003706:	f06f 0001 	mvn.w	r0, #1
 800370a:	e7f8      	b.n	80036fe <__ascii_mbtowc+0x16>

0800370c <__malloc_lock>:
 800370c:	4770      	bx	lr

0800370e <__malloc_unlock>:
 800370e:	4770      	bx	lr

08003710 <__ascii_wctomb>:
 8003710:	b149      	cbz	r1, 8003726 <__ascii_wctomb+0x16>
 8003712:	2aff      	cmp	r2, #255	; 0xff
 8003714:	bf85      	ittet	hi
 8003716:	238a      	movhi	r3, #138	; 0x8a
 8003718:	6003      	strhi	r3, [r0, #0]
 800371a:	700a      	strbls	r2, [r1, #0]
 800371c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003720:	bf98      	it	ls
 8003722:	2001      	movls	r0, #1
 8003724:	4770      	bx	lr
 8003726:	4608      	mov	r0, r1
 8003728:	4770      	bx	lr
	...

0800372c <sqrt>:
 800372c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003730:	ed2d 8b02 	vpush	{d8}
 8003734:	b08b      	sub	sp, #44	; 0x2c
 8003736:	ec55 4b10 	vmov	r4, r5, d0
 800373a:	f000 f851 	bl	80037e0 <__ieee754_sqrt>
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <sqrt+0xac>)
 8003740:	eeb0 8a40 	vmov.f32	s16, s0
 8003744:	eef0 8a60 	vmov.f32	s17, s1
 8003748:	f993 6000 	ldrsb.w	r6, [r3]
 800374c:	1c73      	adds	r3, r6, #1
 800374e:	d02a      	beq.n	80037a6 <sqrt+0x7a>
 8003750:	4622      	mov	r2, r4
 8003752:	462b      	mov	r3, r5
 8003754:	4620      	mov	r0, r4
 8003756:	4629      	mov	r1, r5
 8003758:	f7fd f9bc 	bl	8000ad4 <__aeabi_dcmpun>
 800375c:	4607      	mov	r7, r0
 800375e:	bb10      	cbnz	r0, 80037a6 <sqrt+0x7a>
 8003760:	f04f 0800 	mov.w	r8, #0
 8003764:	f04f 0900 	mov.w	r9, #0
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	4620      	mov	r0, r4
 800376e:	4629      	mov	r1, r5
 8003770:	f7fd f988 	bl	8000a84 <__aeabi_dcmplt>
 8003774:	b1b8      	cbz	r0, 80037a6 <sqrt+0x7a>
 8003776:	2301      	movs	r3, #1
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <sqrt+0xb0>)
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	9708      	str	r7, [sp, #32]
 8003780:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003784:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003788:	b9b6      	cbnz	r6, 80037b8 <sqrt+0x8c>
 800378a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800378e:	4668      	mov	r0, sp
 8003790:	f000 f8d6 	bl	8003940 <matherr>
 8003794:	b1d0      	cbz	r0, 80037cc <sqrt+0xa0>
 8003796:	9b08      	ldr	r3, [sp, #32]
 8003798:	b11b      	cbz	r3, 80037a2 <sqrt+0x76>
 800379a:	f7fe fa6f 	bl	8001c7c <__errno>
 800379e:	9b08      	ldr	r3, [sp, #32]
 80037a0:	6003      	str	r3, [r0, #0]
 80037a2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80037a6:	eeb0 0a48 	vmov.f32	s0, s16
 80037aa:	eef0 0a68 	vmov.f32	s1, s17
 80037ae:	b00b      	add	sp, #44	; 0x2c
 80037b0:	ecbd 8b02 	vpop	{d8}
 80037b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037b8:	4642      	mov	r2, r8
 80037ba:	464b      	mov	r3, r9
 80037bc:	4640      	mov	r0, r8
 80037be:	4649      	mov	r1, r9
 80037c0:	f7fd f818 	bl	80007f4 <__aeabi_ddiv>
 80037c4:	2e02      	cmp	r6, #2
 80037c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80037ca:	d1e0      	bne.n	800378e <sqrt+0x62>
 80037cc:	f7fe fa56 	bl	8001c7c <__errno>
 80037d0:	2321      	movs	r3, #33	; 0x21
 80037d2:	6003      	str	r3, [r0, #0]
 80037d4:	e7df      	b.n	8003796 <sqrt+0x6a>
 80037d6:	bf00      	nop
 80037d8:	200001dc 	.word	0x200001dc
 80037dc:	0802fd47 	.word	0x0802fd47

080037e0 <__ieee754_sqrt>:
 80037e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e4:	4955      	ldr	r1, [pc, #340]	; (800393c <__ieee754_sqrt+0x15c>)
 80037e6:	ec55 4b10 	vmov	r4, r5, d0
 80037ea:	43a9      	bics	r1, r5
 80037ec:	462b      	mov	r3, r5
 80037ee:	462a      	mov	r2, r5
 80037f0:	d112      	bne.n	8003818 <__ieee754_sqrt+0x38>
 80037f2:	ee10 2a10 	vmov	r2, s0
 80037f6:	ee10 0a10 	vmov	r0, s0
 80037fa:	4629      	mov	r1, r5
 80037fc:	f7fc fed0 	bl	80005a0 <__aeabi_dmul>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4620      	mov	r0, r4
 8003806:	4629      	mov	r1, r5
 8003808:	f7fc fd14 	bl	8000234 <__adddf3>
 800380c:	4604      	mov	r4, r0
 800380e:	460d      	mov	r5, r1
 8003810:	ec45 4b10 	vmov	d0, r4, r5
 8003814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003818:	2d00      	cmp	r5, #0
 800381a:	ee10 0a10 	vmov	r0, s0
 800381e:	4621      	mov	r1, r4
 8003820:	dc0f      	bgt.n	8003842 <__ieee754_sqrt+0x62>
 8003822:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003826:	4330      	orrs	r0, r6
 8003828:	d0f2      	beq.n	8003810 <__ieee754_sqrt+0x30>
 800382a:	b155      	cbz	r5, 8003842 <__ieee754_sqrt+0x62>
 800382c:	ee10 2a10 	vmov	r2, s0
 8003830:	4620      	mov	r0, r4
 8003832:	4629      	mov	r1, r5
 8003834:	f7fc fcfc 	bl	8000230 <__aeabi_dsub>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	f7fc ffda 	bl	80007f4 <__aeabi_ddiv>
 8003840:	e7e4      	b.n	800380c <__ieee754_sqrt+0x2c>
 8003842:	151b      	asrs	r3, r3, #20
 8003844:	d073      	beq.n	800392e <__ieee754_sqrt+0x14e>
 8003846:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800384a:	07dd      	lsls	r5, r3, #31
 800384c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003850:	bf48      	it	mi
 8003852:	0fc8      	lsrmi	r0, r1, #31
 8003854:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003858:	bf44      	itt	mi
 800385a:	0049      	lslmi	r1, r1, #1
 800385c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8003860:	2500      	movs	r5, #0
 8003862:	1058      	asrs	r0, r3, #1
 8003864:	0fcb      	lsrs	r3, r1, #31
 8003866:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800386a:	0049      	lsls	r1, r1, #1
 800386c:	2316      	movs	r3, #22
 800386e:	462c      	mov	r4, r5
 8003870:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003874:	19a7      	adds	r7, r4, r6
 8003876:	4297      	cmp	r7, r2
 8003878:	bfde      	ittt	le
 800387a:	19bc      	addle	r4, r7, r6
 800387c:	1bd2      	suble	r2, r2, r7
 800387e:	19ad      	addle	r5, r5, r6
 8003880:	0fcf      	lsrs	r7, r1, #31
 8003882:	3b01      	subs	r3, #1
 8003884:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8003888:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800388c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003890:	d1f0      	bne.n	8003874 <__ieee754_sqrt+0x94>
 8003892:	f04f 0c20 	mov.w	ip, #32
 8003896:	469e      	mov	lr, r3
 8003898:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800389c:	42a2      	cmp	r2, r4
 800389e:	eb06 070e 	add.w	r7, r6, lr
 80038a2:	dc02      	bgt.n	80038aa <__ieee754_sqrt+0xca>
 80038a4:	d112      	bne.n	80038cc <__ieee754_sqrt+0xec>
 80038a6:	428f      	cmp	r7, r1
 80038a8:	d810      	bhi.n	80038cc <__ieee754_sqrt+0xec>
 80038aa:	2f00      	cmp	r7, #0
 80038ac:	eb07 0e06 	add.w	lr, r7, r6
 80038b0:	da42      	bge.n	8003938 <__ieee754_sqrt+0x158>
 80038b2:	f1be 0f00 	cmp.w	lr, #0
 80038b6:	db3f      	blt.n	8003938 <__ieee754_sqrt+0x158>
 80038b8:	f104 0801 	add.w	r8, r4, #1
 80038bc:	1b12      	subs	r2, r2, r4
 80038be:	428f      	cmp	r7, r1
 80038c0:	bf88      	it	hi
 80038c2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80038c6:	1bc9      	subs	r1, r1, r7
 80038c8:	4433      	add	r3, r6
 80038ca:	4644      	mov	r4, r8
 80038cc:	0052      	lsls	r2, r2, #1
 80038ce:	f1bc 0c01 	subs.w	ip, ip, #1
 80038d2:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80038d6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80038da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80038de:	d1dd      	bne.n	800389c <__ieee754_sqrt+0xbc>
 80038e0:	430a      	orrs	r2, r1
 80038e2:	d006      	beq.n	80038f2 <__ieee754_sqrt+0x112>
 80038e4:	1c5c      	adds	r4, r3, #1
 80038e6:	bf13      	iteet	ne
 80038e8:	3301      	addne	r3, #1
 80038ea:	3501      	addeq	r5, #1
 80038ec:	4663      	moveq	r3, ip
 80038ee:	f023 0301 	bicne.w	r3, r3, #1
 80038f2:	106a      	asrs	r2, r5, #1
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	07e9      	lsls	r1, r5, #31
 80038f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80038fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003900:	bf48      	it	mi
 8003902:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003906:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800390a:	461c      	mov	r4, r3
 800390c:	e780      	b.n	8003810 <__ieee754_sqrt+0x30>
 800390e:	0aca      	lsrs	r2, r1, #11
 8003910:	3815      	subs	r0, #21
 8003912:	0549      	lsls	r1, r1, #21
 8003914:	2a00      	cmp	r2, #0
 8003916:	d0fa      	beq.n	800390e <__ieee754_sqrt+0x12e>
 8003918:	02d6      	lsls	r6, r2, #11
 800391a:	d50a      	bpl.n	8003932 <__ieee754_sqrt+0x152>
 800391c:	f1c3 0420 	rsb	r4, r3, #32
 8003920:	fa21 f404 	lsr.w	r4, r1, r4
 8003924:	1e5d      	subs	r5, r3, #1
 8003926:	4099      	lsls	r1, r3
 8003928:	4322      	orrs	r2, r4
 800392a:	1b43      	subs	r3, r0, r5
 800392c:	e78b      	b.n	8003846 <__ieee754_sqrt+0x66>
 800392e:	4618      	mov	r0, r3
 8003930:	e7f0      	b.n	8003914 <__ieee754_sqrt+0x134>
 8003932:	0052      	lsls	r2, r2, #1
 8003934:	3301      	adds	r3, #1
 8003936:	e7ef      	b.n	8003918 <__ieee754_sqrt+0x138>
 8003938:	46a0      	mov	r8, r4
 800393a:	e7bf      	b.n	80038bc <__ieee754_sqrt+0xdc>
 800393c:	7ff00000 	.word	0x7ff00000

08003940 <matherr>:
 8003940:	2000      	movs	r0, #0
 8003942:	4770      	bx	lr

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
